{
  "openapi": "3.0.1",
  "info": {
    "title": "CoSafe API"
  },
  "paths": {
    "/api/Account": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint for registering new user in the system.Receives as input new user's details.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UserInfoBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model of newly created user.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelFull"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelFull"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelFull"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelFull"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelFull"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/validate-password": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to check user's password and regenerate application cookies.",
        "description": "Only \"password\" field required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It regenerates cookies, returns nothing."
          }
        }
      }
    },
    "/api/Account/Login": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint used to login in app, admin panel.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns logged in user's view model.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/LoginAdmin": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint used to login in app, admin panel.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns logged in user's view model.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/LoginDashboard": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint used to login in app, admin panel.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/LoginBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns logged in user's view model.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Password/Token": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint used to send password reset token to email. This endpoint does not require authentication.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SendPasswordTokenBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns nothing. Just indicates just password reset token generated and user should receive it via email."
          }
        }
      }
    },
    "/api/Account/Password/Reset": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to reset password using token. This endpoint does not require authentication.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns nothing, just indicates that password reset with token should return no errors."
          }
        }
      }
    },
    "/api/Account/Password/ValidateToken": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to validate token. Token might be for resetting password, confirming email, user registration token. This endpoint does not require authentication.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "It returns nothing. Just indicates that token validated successfully."
          }
        }
      }
    },
    "/api/Account/AuthStatus": {
      "get": {
        "tags": ["Account"],
        "summary": "This endpoint used to update user session and update last access. No parameters needed at all.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationStatusViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationStatusViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationStatusViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationStatusViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationStatusViewModel"
                }
              }
            }
          },
          "204": {
            "description": "It returns nothing. Just indicates that request worked successfully."
          }
        }
      }
    },
    "/api/Account/Info": {
      "get": {
        "tags": ["Account"],
        "summary": "This endpoint returns info about the user making this request and updates its session.",
        "responses": {
          "200": {
            "description": "Returns user info view model.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Info/app": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to get user info for the app. Similar to GET api/account/info, but returns less info.",
        "responses": {
          "200": {
            "description": "Returns user info view model.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModelApp"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModelApp"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModelApp"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModelApp"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModelApp"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/Language": {
      "post": {
        "tags": ["Account"],
        "summary": "User can edit own preferred language using this endpoint.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns nothing. Just indicates request worked successfully."
          }
        }
      }
    },
    "/api/Account/Logout": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to remove cookies and log out.",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Optional parameter. If specified - delete that device if it exists and belongs to the user that is logging out, otherwise - just log out without deleting anything.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "It returns nothing. Just indicates request worked successfully."
          }
        }
      }
    },
    "/api/Account/ChangePassword": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to change password. After password changed, user logs in with new password automatically on backend side.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns nothing. Just indicates request worked successfully."
          }
        }
      }
    },
    "/api/Account/AntiForgeryToken": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint used to get and store antiforgery token.",
        "responses": {
          "200": {
            "description": "Returns request verification token.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RequestVerificationTokenViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestVerificationTokenViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestVerificationTokenViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestVerificationTokenViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestVerificationTokenViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/EmergencyTypes": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to get list of emergency types accessible for the user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/AuthorizationUrl": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to get authorization url for SSO login. In case Skolon, \"provider\" parameter passed, \"email\" parameter not used. In other cases \"email\" parameter required.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "sso provider",
            "schema": {
              "$ref": "#/components/schemas/SsoProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SsoRedirectViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoRedirectViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoRedirectViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SsoRedirectViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SsoRedirectViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/CodeLogin": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint used to login with referral code.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns logged in user data.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/CodeGroupJoin": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to join group using referral code.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CodeLoginBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing, just indicates that request worked successfully."
          }
        }
      }
    },
    "/api/Account/LeaveGroup/{id}": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint used to leave coAlert group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing, just indicates that request worked successfully."
          }
        }
      }
    },
    "/api/Account/AlarmTest/Initiate": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to send self alarm message.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/InitiateAlarmTestBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns initiated alarm test Id.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateAlarmTestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateAlarmTestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateAlarmTestViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateAlarmTestViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateAlarmTestViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/AlarmTest/ReportStatus": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to changes status of self alarm test.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AlarmTestStatusBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing, just indicates that request worked successfully."
          }
        }
      }
    },
    "/api/Account/Support": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to get support contacts of organizations where user is member.",
        "responses": {
          "200": {
            "description": "Returns organization view models which contain support contact information.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelWithSupportContacts"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelWithSupportContacts"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelWithSupportContacts"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelWithSupportContacts"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelWithSupportContacts"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/TestAPI": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to test whether the backend api is alive (tests database connection, rabbitmq queue connections)",
        "responses": {
          "200": {
            "description": "Returns api status view model (database connection status, rabbitmq queue status)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestApiViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestApiViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestApiViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TestApiViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TestApiViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/SamlRedirect": {
      "post": {
        "tags": ["Account"],
        "summary": "Endpoint to get redirect url for saml sso authorization. Saml configurations are retrieved from user organization. In case user not found, it is created and initialized.",
        "description": "user is redirected to this url $\"{redirectUrl}&code={token}.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Optional parameter used if the organization has more than one domain",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Found"
          }
        }
      }
    },
    "/api/Account/GetIntercomToken": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to get token token to be used with Intercom",
        "parameters": [
          {
            "name": "clientType",
            "in": "query",
            "description": "0 - android, 1 - ios, 2 - web",
            "schema": {
              "$ref": "#/components/schemas/IntercomClientType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns UserId and Token used for Intercom.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IntercomTokenViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntercomTokenViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntercomTokenViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/IntercomTokenViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/IntercomTokenViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/roles": {
      "get": {
        "tags": ["Account"],
        "summary": "Endpoint to get user roles. Updating users sessions according to parent organization session configuration settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/All": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get accessible groups in admin panel.",
        "description": "\"Skip\" - skip the specified number of elements from the list; \"Limit\" - take the specified number of elements from the list, \"Asc\" - (ASC or DESC) sorting order;\r\n            \"Sort\" - (Name or 0, TotalPeople or 1, TotalMessages or 2, Organization or 3, Suborganization or 4, Hidden or 5, RegistrationDate or 6, Municipality or 7, Type or 8), Name - sort by name, TotalPeople - sort by member count, TotalMessages - sort by total messages sent within group,\r\n            Organization - in case group belongs to suborganization, order by parent organization name, otherwise order by by groups organization name, Suborganization - in case group belongs to suborganization order by suborganizations name,\r\n            Hidden - put hidden groups first in the list, RegistrationDate - order by group created date, Municipality - order by groups municipality name, Type - order by groups type (ASC order will be: Normal,Hidden,CrossOrgGroup,CoAlert, DESC is in reverse order);\r\n            \"Search\" - filter groups by name using this parameter in case insensitive manner; \"OrgId\" - return groups from only specified organization; \"Deleted\" - include groups deleted within last 24h;\r\n            \"IncludeSuborgs\" - this parameter is used in pair with OrgId parameter, in case true suborganization groups included from the specified Organization (via OrgId paramter);\r\n            \"IncludeAlarmGroups\" - not used; \"Id\" - not used; \"GroupType\" - in case specified return groups of the specified type(0 - Normal, 2 - Hidden, 3 - CrossOrg, 4 - CoAlert);\r\n            \"MenuItem\" - in case specified filter groups by specified menuitem enabled in groups organization(possible values: groups, messages, news, checklists, documents, muster, group_alarm, offline_documents, organization_website, support, settings, profile, alarm, oncall_alert, group_alarm_work_alone);\r\n            \"IncludeMembers\" - in case true memberIds(members of the group) returned in group view models",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Asc",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortEnum"
            }
          },
          {
            "name": "Sort",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortByEnum"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrgId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeSuborgs",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAlarmGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "GroupType",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupType"
              }
            }
          },
          {
            "name": "MenuItem",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeMembers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns total groups count and group view models.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/getallusers": {
      "get": {
        "tags": ["Admin"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/Groups/{id}/members": {
      "get": {
        "tags": ["Admin"],
        "summary": "Returns members of the specified group excluding coAlert users",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view models of group members",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModelFull"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModelFull"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModelFull"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModelFull"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModelFull"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/Member": {
      "post": {
        "tags": ["Admin"],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/Groups/{groupID}/members/{userID}": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to remove specified user from the specified group",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to set/unset specified user as admin of the specified group",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SetGroupAdminBindingModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Groups/Register": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create new group",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model of newly created group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/editgroup": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model of the edited group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/editgroupname": {
      "post": {
        "tags": ["Admin"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupBindingChangeNameModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/Groups/{id}/delete": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Groups": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified groups",
        "requestBody": {
          "description": "group ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/restore": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to restore the specified deleted group (the group must be deleted within last 24h, if since group delete operation more than 24h passed, its impossible to restore it)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/details": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get the specified groups details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model containing the specified groups details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/addMember": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to add the specified user to the specified group. Either userId or userEmail required.",
        "description": "Parameters: \"Id\" - user id (optional), \"Email\" - user email (optional), \"admin\" - in case true, set user as admin member in the group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing the specified user and group details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/addMembers": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to add the specified users to the specified groups. Either userId or userEmail required.",
        "description": "Parameters: \"GroupId\" - group id, \"Id\" - user id (optional), \"Email\" - user email (optional), \"admin\" - in case true, set user as admin member in the group",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupAddMemberModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing the specified user and group details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndGroupViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/copy": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create copy of the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model of new copied group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/copy": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to copy the specified groups",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CopyGroupsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing number of groups copied and not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCopyViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCopyViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCopyViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCopyViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCopyViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/activate": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to activate/deactivate the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ActivateGroupBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model of the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/codes": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to export the referral codes data (code, total uses, remaining uses, active or not) of the specified group into excel file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns excel file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Groups/{id}/regeneratecodes": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to deactivate existing referral codes of the specified group and regenerate new ones",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Users/accounts": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to get users list in admin panel, users only from managed organizations are returned (except SuperAdmin user which has full access to all users)",
        "requestBody": {
          "description": "filter out user, see parameter descriptions GET /api/admin/users/accounts",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GetAdminUsersAccountBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing all users and total count of users",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get users list in admin panel, users only from managed organizations are returned (except SuperAdmin user which has full access to all users)",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Possible values: (\"name\", \"nameDesc\" - order by display name, \"roles\", \"rolesDesc\" - order by number of roles users have, \"email\", \"emailDesc\" - order by users email address, \"created\", \"createdDesc\" - order by users created date, \"lastVisit\", \"lastVisitDesc\" - order by users last visit, \"groups\", \"groupsDesc\" - order by group membership count of user, \"messages\", \"messagesDesc\" - order by int User.MessagesSentCount field, \"inviteStatus\", \"inviteStatusDesc\" - sorting users by some weird logic, based on sending registration email and token expiration, \"organizationName\", \"organizationNameDesc\" - sorting users by organization name ,\r\n            \"device\" or \"devices\", \"deviceDesc\" or \"devicesDesc\" - order by number of devices users have, \"administrators\", \"administratorsDesc\" - order by the number of organizations where user is manager, \"alarm\", \"alarmDesc\" - sorts users by their last alarm test success status. Users without any alarm test should be in the end of the list, \"organizations\", \"organizationsDesc\" - order by number of organizations where user is member)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "filter out user by email or display name in case insensitive manner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of users",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "take the specified number of users",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "return users from the specified organization(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unsentOnly",
            "in": "query",
            "description": "in case true, return only users that have not received email yet",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "neverLoggedIn",
            "in": "query",
            "description": "in case true, return users who never logged in, last access value is null",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "showDeleted",
            "in": "query",
            "description": "in case true, return also deleted users",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "inviteStatus",
            "in": "query",
            "description": "in case is not null, return users with the specified invite status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserInviteStatus"
              }
            }
          },
          {
            "name": "includeSuborgs",
            "in": "query",
            "description": "user in pair with \"organization\" parameter, in case true users from suborganizations are included in the list",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "menuItem",
            "in": "query",
            "description": "filter out users by menuItem of their organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isOrgManager",
            "in": "query",
            "description": "in case is not null, filter out users by organization manager status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "creationMethod",
            "in": "query",
            "description": "in case is not null, filter out users by creation method",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserCreationMethod"
              }
            }
          },
          {
            "name": "lastActive",
            "in": "query",
            "description": "in case is not null, filter out users by last active date",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserLastActiveStatus"
              }
            }
          },
          {
            "name": "alarmTest",
            "in": "query",
            "description": "in case is not null, filter out users by alarm test status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserAlarmTestStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model containing all users and total count of users",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UsersAccountViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/{id}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get details of the specified users",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/sendregistrationemails": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to send registration emails to users",
        "description": "SuperAdmins must pass userId/s. In case userId/s not specified, users are from managed organizations\r\n           Parameters: \"Ids\" - user Ids, \"ResendExpired\" - in case true, resend email to users with expired registration token??? (inside controller its vice versa indeed)",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SendRegistrationEmailModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/sendreminders": {
      "post": {
        "tags": ["Admin"],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ReminderEmailBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/municipalitys": {
      "get": {
        "tags": ["Admin"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/roles": {
      "get": {
        "tags": ["Admin"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/allroles": {
      "get": {
        "tags": ["Admin"],
        "summary": "User gets own roles using this endpoint",
        "responses": {
          "200": {
            "description": "Returns user role view models",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/{id}/userGroups": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to return groups where the specified user is member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns group view models",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/Register": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to register new user",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns created users view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/Register-users": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to register up to 100 new users",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/manageroles": {
      "patch": {
        "tags": ["Admin"],
        "summary": "Allows to manage multiple roles for the single user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of roles",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleStatus"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing userId and roles",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/manageroles": {
      "patch": {
        "tags": ["Admin"],
        "summary": "Allows to manage multiple roles for the multiple users",
        "requestBody": {
          "description": "List of users roles data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRolesStatuses"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/manageUserGroups": {
      "patch": {
        "tags": ["Admin"],
        "summary": "Endpoint to add/remove specified user from group/s",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupStatus"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model with summary of results",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/manageUserGroups": {
      "patch": {
        "tags": ["Admin"],
        "summary": "Endpoint to add/remove specified user from group/s",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManageUserGroupsBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model with summary of results",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ManageUserGroupsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/{id}/OrganizationMemberships": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to retrieve the list of organization memberships that a user is a member of.\r\nIt first verifies if the authenticated user has access to the target user's information.\r\nIf the user is not found or is not accessible, it returns a Not Found error.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user whose organization memberships are being queried.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/{id}/edit": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UserBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns specified user view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserMemberViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/{id}/changePassword": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to change password of the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/delete": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/deleteFully": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/deleteNotReally": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AccountDeleteBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Users/delete": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified users",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Users/deleteFully": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified users",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Users/deleteNotReally": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified users",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountDeleteBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/UserTokens": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get the specified user's devices/tokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns device view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/Inform": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to inform specified users via email",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/InformUsersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Users/{id}/GetAlarmTests": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get alarm tests initiated by the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns alarm test view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmTestViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmTestViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmTestViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmTestViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlarmTestViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/ForceLogOut": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete specified authorization token",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AuthTokenDisposeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Users/ForceLogOutUsers": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete authorization tokens of the specified users",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DisposeAuthTokenForUsersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Language": {
      "post": {
        "tags": ["Admin"],
        "summary": "User can edit own preferred language for admin panel.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferredLanguageBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "It returns nothing. Just indicates request worked successfully."
          }
        }
      }
    },
    "/api/Admin/Organizations/All": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get organizations list in admin panel",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "The search keyword to filter organizations by name or accountId (optional).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyOrganizations",
            "in": "query",
            "description": "in case true return only parent organizations (optional)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "onlySuborganizations",
            "in": "query",
            "description": "in case true return only suborganizations (optional)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "return suborganizations of the specified parent organization (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minUsers",
            "in": "query",
            "description": "The minimum number of users an organization should have (optional).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxUsers",
            "in": "query",
            "description": "The maximum number of users an organization should have (optional).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeNested",
            "in": "query",
            "description": "in case true include suborganizations also in the list (optional)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "isManager",
            "in": "query",
            "description": "this parameter works only if the user making request is manager in parent organization. In case true return only organizations where user is manager, in case false return only organizations where user is\r\n            typical member, not admin, in case not specified return organizations where user is any type of member, admin or typical user does not matter (optional)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "menuItem",
            "in": "query",
            "description": "in case specified return only organizations where the specified menuitem is enabled (optional)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns organization view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/List": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get organizations list in admin panel, exactly the same logic as in GET api/admin/organizations/all\r\nDifference only in returned view models, this endpoint returns organization view models with less info.",
        "parameters": [
          {
            "name": "onlyOrganizations",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "onlySuborganizations",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeNested",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "isManager",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "menuItem",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calculateNumberOfUsersRemaining",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns organization view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/AddUsers": {
      "post": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to add users to an organization.\r\nIt first checks if the user making the request has the authority to manage the organization.\r\nThen, it verifies if the provided user IDs are valid and accessible.\r\nOtherwise, it adds the specified users to the organization and returns an Ok response.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "An array of user IDs to be added to the organization.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns organization view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/organizations/{id}/sso": {
      "post": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to edit the single sign-on (SSO) settings for an organization.\r\nIt checks if the user making the request has the authority to ManageIntegrations the organization.\r\nIf the organization is not found or not accessible, it returns an appropriate error response.\r\nOtherwise, it updates the SSO settings for the organization and returns an Ok response.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The SSO settings to be edited",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSsoSettingsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Organizations/Create": {
      "post": {
        "tags": ["Admin"],
        "summary": "The endpoint creates a new organization.\r\nThe method checks if the received data is valid and if the SSO properties are allowed only for the main organization.\r\nIt then stores the new organization in the database with the provided data\r\nand returns an OrganizationViewModel object as a response.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created organiaztion's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/Edit": {
      "post": {
        "tags": ["Admin"],
        "summary": "The endpoint in is used to update an existing organization's properties.\r\nIt takes in the id of the organization to be edited and a data object containing the updated properties.\r\nIf the model state is not valid, it returns a bad request.\r\nIf the user does not have permission to manage the organization, it returns an unauthorized access status code.\r\nIf the data object contains SSO properties, it checks if it is the main organization and if the required SSO properties are present.\r\nThe endpoint returns a success status code if the organization is updated successfully.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edited organization's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/Delete": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/AssignMenuItem": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to assign specified menu items in the specified organization\r\n<remarks>menuitems must be enabled in the specified organization already</remarks>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssignMenuItemBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/EnableMenuItem": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to enable/disable specified menuitem for the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EnableMenuItemBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/EnableMenuItems": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to endable/disable specified menuitems in the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateUserMenus",
            "in": "query",
            "description": "A flag indicating whether to update user menus after enabling or disabling the menu items.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "An array of EnableMenuItemBindingModel objects containing information about which menu items to enable or disable.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EnableMenuItemBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/EmergencyTypes": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get emergency types of the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns emergency type view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/ReorderEmergencyTypes": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to reorder emergency type/s of the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReorderEmergencyTypeBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/MenuItems": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get menu items of the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns menu item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyTypeIcons": {
      "get": {
        "tags": ["Admin"],
        "summary": "Returns the icons of emergency types",
        "responses": {
          "200": {
            "description": "Returns icon view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeIconViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeIconViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeIconViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeIconViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmergencyTypeIconViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/AddManager": {
      "post": {
        "tags": ["Admin"],
        "summary": "Add user as manager to the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/RemoveManager": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to remove manager from the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAddMemberModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/SetManagers": {
      "post": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to set managers to an organization.\r\nIt first checks if the user making the request has the authority to manage the organization.\r\nThen, it retrieves the current managers for the organization from the database.\r\nIt determines the managers to add by comparing the provided user IDs with the current managers.\r\nIt also determines the managers to remove by comparing the current managers with the provided user IDs.\r\nIf any users are not found or not accessible, it returns a Not Found error with a descriptive message.\r\nIt adds the new managers to the organization and removes the managers that need to be removed.\r\nFinally, it returns an Ok response indicating that the operation was successful.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "An array of user IDs representing the managers to set.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/RemoveUser/{userId}": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to remove user from suborganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "suborganization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/RemoveUsers": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to remove users from organization or suborganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "user ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/SendEmail": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to send email to organizations. Accessible only to SuperAdmin.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToOrganizationsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/SendEmailToMembers": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to send email to organizations. Accessible only to SuperAdmin.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsToOrganizationsMembersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/ExportUsersToExcel": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to export users of the specified organization/s into excel file",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestForUserExportToExcelBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns excel file containing exported users",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/ListSentEmails": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint accessible only to super admins, it returns the list of sent emails to organizations",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "return the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "possible values: \"emailTemplate\", \"emailTitle\", \"sendTime\", \"senderAddress\", \"sendStructure\" - sorts by number of organizations email is sent. If not specified elements sorted by their Id in \"ASC\" mode.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "possible values: \"ASC\", \"DESC\". Default value \"ASC\"",
            "schema": {
              "type": "string",
              "default": "ASC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns email view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/ExportEmailRecipientsToExcel": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to export email recipients from the specified organization/s into excel file",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/RequestForOrganizationEmailRecipientsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns excel file containing email recipients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/EventCodes": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint returns event codes of the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns event code view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCodeViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCodeViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCodeViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCodeViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCodeViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/UsersStatistics": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to retrieve user statistics for organizations.\r\nIt first checks if the user making the request has the authority to manage organizations.\r\nThen, it retrieves statistics about the number of users in each organization.",
        "parameters": [
          {
            "name": "users",
            "in": "query",
            "description": "An array of integers representing the upper bounds of user count ranges. Organizations are counted in these ranges.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "orgType",
            "in": "query",
            "description": "The type of organization to filter the statistics by. Can be 'Account' or 'SubAccount'.",
            "schema": {
              "$ref": "#/components/schemas/OrganizationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationsUsersStatisticsViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationsUsersStatisticsViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationsUsersStatisticsViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationsUsersStatisticsViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationsUsersStatisticsViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create external contact list",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created external contact list's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/{organizationId}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get external contact lists of the specified organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns external contact list view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/Organizations/{organizationId}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get external contacts of the specified organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Possible values: \"name\" - default, \"title\", \"email\", \"phone1\", \"phone2\", \"lists\"",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeListId",
            "in": "query",
            "description": "Array of external contact list id to exclude contacts that are already in these lists",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns external contact list view models",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModelPaginatedList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModelPaginatedList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModelPaginatedList"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/Organizations/{organizationId}/ExportExcel": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to export as external contacts of the specified organization into excel file",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/Organizations/{organizationId}/ImportExcel": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to import external contacts from Excel file of the specified organization\r\nand link them to the specified contact lists",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "listId",
            "in": "query",
            "description": "array for lists id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactsImportCsvResultViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactsImportCsvResultViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactsImportCsvResultViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactsImportCsvResultViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactsImportCsvResultViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/{contactListId}/Edit": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to change specified contact list's name",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactListEditBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/{contactListId}/GetAllContacts": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint returns paginated list of contacts from the specified contact list",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Possible values: \"name\" - default, \"title\", \"email\", \"phone1\", \"phone2\", \"lists\"",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated list of external contact view models",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModelPaginatedList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModelPaginatedList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModelPaginatedList"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/Contacts/{contactId}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint returns external contact view model by contactId",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns external contact view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalContactViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/{contactListId}/AddContacts": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to add contacts to the specified contact list",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/ExternalContacts/{contactListId}/AddExistingContacts": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to add existing contacts to the specified contact list",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/{contactListId}/RemoveContacts": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to remove contacts from the specified contact list",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/CreateContacts": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to add external contacts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalContactBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/EditContact/{contactId}": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified contact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/DeleteContacts": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete external contact/s",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ExternalContactsDeleteBindingModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/DeleteContactList/{contactListId}": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete specified contact list",
        "parameters": [
          {
            "name": "contactListId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/DeleteContactLists": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete specified contact lists",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/ExternalContacts/Organizations/{organizationId}/ExternalContactsSMSCount": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to return sms counts",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "organizartion",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Counts of sent external SMS for organization",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactSMSCount"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactSMSCount"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactSMSCount"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactSMSCount"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactSMSCount"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/TextTemplatesForExternalContacts/{organizationId}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get text templates for external contacts for the specified organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns text template view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create text template for external contacts communiacation for the specified organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/TextTemplatesForExternalContacts/Edit/{templateId}": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified text template for external contacts",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/TextTemplateForExternalContactsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/TextTemplatesForExternalContacts/Delete/{templateId}": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified text template for external contacts",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/TextTemplatesForExternalContacts": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified text templates for external contacts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/SubOrganizations/All": {
      "get": {
        "tags": ["Admin"],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/SubOrganizations/{id}": {
      "get": {
        "tags": ["Admin"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/SubOrganizations/Create": {
      "post": {
        "tags": ["Admin"],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SubOrganizationBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/SubOrganizations/Bulk/Create": {
      "post": {
        "tags": ["Admin"],
        "summary": "Allow to create multiple suborganizations at once API call.",
        "requestBody": {
          "description": "The request - list of suborganization names and parent organization id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/BulkSubOrganizationBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/EnableCustomMenu": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to enable/disable custom menu for the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EnableCustomMenuBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/ImportSettings": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to retrieve the import settings for a specific organization.\r\nIt first checks if the user making the request has the authority to ManageIntegrations the organization.\r\nThen, it retrieves the organization object with its related import settings.\r\nIf the organization or its import settings are not found, it returns a Not Found error.\r\nOtherwise, it returns an Ok response with the imported settings model.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to update the import settings for a specific organization.\r\nIt first checks if the user making the request has the authority to ManageIntegrations the organization.\r\nThen, it retrieves the organization object with its related import settings.\r\nIf the organization is not found, it returns a Not Found error.\r\nIf the ImportType is null, the endpoint determines it based on the file extension of FileName, which supports only Excel (.xlsx) or CSV (.csv) files.\r\nOtherwise, it updates the import settings for the organization and returns an Ok response with the updated imported settings model.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organization to update the import settings for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing the new import settings to update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationImportSettingsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsViewModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to delete the import settings for a specific organization.\r\nIt first checks if the user making the request has the authority to ManageIntegrations the organization.\r\nThen, it retrieves the organization object with its related import settings.\r\nIf the organization or its import settings are not found, it returns a Not Found error.\r\nOtherwise, it deletes the import settings from the organization object and saves the changes to the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organization for which to delete the import settings.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/Admin/Organizations/{id}/ImportSettings/Test": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to test the import settings for a specific organization.\r\nIt first checks if the user making the request has the authority to manage the organization.\r\nThen, it retrieves the organization object with its related import settings.\r\nIf the organization or its import settings are not found, it returns a Not Found error.\r\nOtherwise, it reads the input data using the import settings and returns an Ok response with the model that includes the first 50 input data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the organization to test the import settings for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsTestViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsTestViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsTestViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsTestViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationImportSettingsTestViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EntityChangeLog": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get entity change logs in admin panel, only SuperAdmin can access this endpoint",
        "parameters": [
          {
            "name": "entityName",
            "in": "query",
            "description": "possible values: \"User\", \"Group\", \"GroupMember\", \"Password\", \"Location\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "changed entity id, like userId, groupId, etc",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "take the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userEmail",
            "in": "query",
            "description": "get change log of user with specified email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "description": "not used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedUserEmail",
            "in": "query",
            "description": "get change log of log where email of some user has been changed to this specified value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "get change logs related to this organization",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns entity change log view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityChangeLogViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityChangeLogViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityChangeLogViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityChangeLogViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityChangeLogViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Notifications": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get notifications log",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "take specified number of elements",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "filter out notifications for users with the specified email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "parameter used only by SuperAdmins: Super admin can filter out notifications based on any organizationId",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns notification view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationsViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationsViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationsViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationsViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationsViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to test notification. Authorization is not required for this endpoint.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {}
            },
            "application/json": {
              "schema": {}
            },
            "text/json": {
              "schema": {}
            },
            "application/*+json": {
              "schema": {}
            },
            "application/xml": {
              "schema": {}
            },
            "text/xml": {
              "schema": {}
            },
            "application/*+xml": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns FirebaseReport object",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/NotificationTest": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to test notification. Authorization is not required for this endpoint.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {}
            },
            "application/json": {
              "schema": {}
            },
            "text/json": {
              "schema": {}
            },
            "application/*+json": {
              "schema": {}
            },
            "application/xml": {
              "schema": {}
            },
            "text/xml": {
              "schema": {}
            },
            "application/*+xml": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns FirebaseReport object",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FirebaseReport"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyReport": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to generate and get emergency report",
        "description": "Parameters: \"type\" - possible values: 1, 2. 1 - crisis based (get report for specific emergency by using its Id), 2 - time interval based (get report for all emergencies within specified timeframe). Now only value 2 is used;\r\n\"crisisid\" - ID of emergency to generate report. Only when \"type\" : 1. Now this parameter is ignored;\r\n\"starttime\" - start time when \"type\" : 2;\r\n\"endtime\" - end time when \"type\" : 2;\r\n\"amplitude\" - single possible value: 2 (virus mode).In case specified include all involved users. For example, if user from initial group sends message in other group, all users should be checked further, what they have done, and include also their actions;\r\n\"depth\" - not used anymore;\r\n\"language\" - language used, possible values: \"en\", \"se\", \"pt\";\r\n\"organizationID\" - optional parameter. In case specified user must be able to manage the specified organization. Specified in case user wants to see actions within the specific organization;\r\n\"includeSuborgs\" - used in pair with \"organizationID\" parameter, in case specified return emergency logs from suborganizations also ;\r\n\"groupId\" - optional parameter, in case specified filter emergency logs by group;\r\n\r\nGenerated report field's:\r\n\"id\" - entity id;\r\n\"timestamp\" - time of event;\r\n\"deltatime\" - [timestamp - data.StartTime] difference between start time(for report generation) and time of event;\r\n\"messageType\" - type of message: typical message, or checklist item checking event, etc (definition of types defined below, after this section);\r\n\"msgtext\" - text of message;\r\n\"images\" - links to the images added to message;\r\n\"documents\" - links to the documents attached to message;\r\n\"audioFiles\" - links to the audioFIles attached to message;\r\n\"sender\" - name of user or service that sent message;\r\n\"sendertype\" - possible values 0,1,2. 0 - Normal - Users that are not initiators of crisis message and not crisis team members,\r\n1 - Initiator - Normal users that have initiated any crisis message within period or crisis. Can be that someone else initiates new crisis thread, then also such person should be marked as initiator. Both for one crisis and period. Could be harder if person initiates new different ongoing crisis later in report, if to mark him as initiator also previously in report,\r\n2 - CTM - Crisis team members;\r\n\"in_groups\" - list of groups and their members that received this message;\r\n\"emergency_type\" -  emergency type id of emergency message;\r\n\"emergency_type_name\" - localized names of the emergency type (in case this is emergency message);\r\n\"latitude\" - latitude of the location of message;\r\n\"longitude\" - longitude of the location of message;\r\n\"location_name\" - name of the location of message;\r\n\"location_time\" - message sent time converted to location time zone;\r\n\"initialId\" - messages initial id in the format (CL(checklistId), OCA(onCallAlertId), MUS(musterId), M(messageId));\r\n\"initial_message_type\" - reply's initial message's type;\r\n\"initial_message_type\" - reply's initial message's subtype;\r\n\"message_recipients\" - message recipients;\r\n\"organization\" - messages organization in case this is broaccast message;\r\n\"ended\" - whether the event connected to this message endded (alarm recalled, checklist ended, oncallalert ended, muster(IamOk) ended);\r\n\"isInitial\" - whether the initial format fits M(messageId) for messages, etc;\r\n            \r\n\r\nMessage types:\r\nPossible values currently in use: \r\n34 - New group created via POST apu/admin/groups/register, sender - user who created group via admin panel,\r\n\r\n35 - Group deleted via DELETE api/admin/groups/{id}/delete, sender - user who deleted specified group,\r\n\r\n33 - User deleted via DELETE api/admin/users/{id}/delete(or deleteFully or deleteNotReally), sender - user who deleted the specified user,\r\n\r\n21 - New checklist created via POST api/admin/checklists, sender - checklist creator,\r\n\r\n21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/sharelive/{groupIDs} with specified groups, sender - user who shared the specified checklist,\r\n\r\n21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/usershare with specified users, sender - user who shared the specified checklist,\r\n\r\n21 - Checklist shared via POST api/checklists/{checklistID}/sharelive/{groupIdString} with specified groups, sender - user who shared specified checklist,\r\n\r\n5 - Checklist started with specified groups via POST api/checklists/{checklistID:int}/start/{groupIDs}, sender - user who started checklist,\r\n\r\n5 - Checklist started with users and groups via POST api/checklists/{checklistID:int}/startWithUsersAndGroups, sender - user who started checklist,\r\n\r\n22 - Checklist ended via POST api/checklists/{checklistID}/end, sender - user who ended checklist,\r\n\r\n23 - Ended checklist reactivated via POST api/checklists/{checklistID}/reactivate, sender - user who reactivated the ended checklist,\r\n\r\n32 - User/s created via POST api/admin/Users/Register-users, sender - user who registers new user/s,\r\n\r\n32 - User created via POST api/account/login when user logged in first time, user is initialized, sender - user who makes this api request,\r\n\r\n32 - User is initialized via POST api/account/codelogin (login using referral code), sender - user who makes this api request,\r\n\r\n32 - User is initialized via POST api/account/samlredirect (when user logs in using saml sso), sender - created user via saml sso,\r\n\r\n32 - User is registered via POST api/admin/users/register, sender - user who makes request to register new user,\r\n\r\n32 - User/s are imported via POST api/admin/users/import-users, sender - user who makes this api request for import,\r\n\r\n26 - Log created for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) POST api/groups/{id}/activateAlarm, sender - user who sends this request,\r\n\r\n26 - Log created for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) POST api/groups/activateAlarms, sender - user who sends this request,\r\n\r\n27 - Log created for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/{id}/deactivateAlarm, sender - user who sends this request,\r\n\r\n27 - Log created for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/deactivateAlarms, sender - user who sends this request,\r\n\r\n18 - Specified group added to the specified message via POST api/messages/{id}/addgroup/{groupId}, sender - user who makes this request,\r\n\r\n5 - New checklist started when sending emergency message via POST api/messages, sender - user who makes this request,\r\n\r\n19 - Specified message deleted, deleted message is of type GroupMessageType.Message(type 0) or any type other than type 9(GroupMessageType.HoldingStatement) and type 10(GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n38 - Specified message deleted, deleted message is of type GroupMessageType.HoldingStatement(type 9), sender - user who makes this request,\r\n\r\n41 - Specified message deleted, deleted message is of type GroupMessageType.LogNote(type 10), sender - user who makes this request,\r\n\r\n10 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n36 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,\r\n\r\n39 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n20 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n37 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,\r\n\r\n40 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request.\r\n",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns emergency report view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyReportDownload": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to generate and get emergency report",
        "description": "Parameters: \"type\" - possible values: 1, 2. 1 - crisis based (get report for specific emergency by using its Id), 2 - time interval based (get report for all emergencies within specified timeframe). Now only value 2 is used;\r\n\"crisisid\" - ID of emergency to generate report. Only when \"type\" : 1. Now this parameter is ignored;\r\n\"starttime\" - start time when \"type\" : 2;\r\n\"endtime\" - end time when \"type\" : 2;\r\n\"amplitude\" - single possible value: 2 (virus mode).In case specified include all involved users. For example, if user from initial group sends message in other group, all users should be checked further, what they have done, and include also their actions;\r\n\"depth\" - not used anymore;\r\n\"language\" - language used, possible values: \"en\", \"se\", \"pt\";\r\n\"organizationID\" - optional parameter. In case specified user must be able to manage the specified organization. Specified in case user wants to see actions within the specific organization;\r\n\"includeSuborgs\" - used in pair with \"organizationID\" parameter, in case specified return emergency logs from suborganizations also ;\r\n\"groupId\" - optional parameter, in case specified filter emergency logs by group;\r\n\r\nGenerated report field's:\r\n\"id\" - entity id;\r\n\"timestamp\" - time of event;\r\n\"deltatime\" - [timestamp - data.StartTime] difference between start time(for report generation) and time of event;\r\n\"messageType\" - type of message: typical message, or checklist item checking event, etc (definition of types defined below, after this section);\r\n\"msgtext\" - text of message;\r\n\"images\" - links to the images added to message;\r\n\"documents\" - links to the documents attached to message;\r\n\"audioFiles\" - links to the audioFIles attached to message;\r\n\"sender\" - name of user or service that sent message;\r\n\"sendertype\" - possible values 0,1,2. 0 - Normal - Users that are not initiators of crisis message and not crisis team members,\r\n1 - Initiator - Normal users that have initiated any crisis message within period or crisis. Can be that someone else initiates new crisis thread, then also such person should be marked as initiator. Both for one crisis and period. Could be harder if person initiates new different ongoing crisis later in report, if to mark him as initiator also previously in report,\r\n2 - CTM - Crisis team members;\r\n\"in_groups\" - list of groups and their members that received this message;\r\n\"emergency_type\" -  emergency type id of emergency message;\r\n\"emergency_type_name\" - localized names of the emergency type (in case this is emergency message);\r\n\"latitude\" - latitude of the location of message;\r\n\"longitude\" - longitude of the location of message;\r\n\"location_name\" - name of the location of message;\r\n\"location_time\" - message sent time converted to location time zone;\r\n\"initialId\" - messages initial id in the format (CL(checklistId), OCA(onCallAlertId), MUS(musterId), M(messageId));\r\n\"initial_message_type\" - reply's initial message's type;\r\n\"initial_message_type\" - reply's initial message's subtype;\r\n\"message_recipients\" - message recipients;\r\n\"organization\" - messages organization in case this is broaccast message;\r\n\"ended\" - whether the event connected to this message endded (alarm recalled, checklist ended, oncallalert ended, muster(IamOk) ended);\r\n\"isInitial\" - whether the initial format fits M(messageId) for messages, etc;\r\n            \r\n\r\nMessage types:\r\nPossible values currently in use: \r\n34 - New group created via POST apu/admin/groups/register, sender - user who created group via admin panel,\r\n\r\n35 - Group deleted via DELETE api/admin/groups/{id}/delete, sender - user who deleted specified group,\r\n\r\n33 - User deleted via DELETE api/admin/users/{id}/delete(or deleteFully or deleteNotReally), sender - user who deleted the specified user,\r\n\r\n21 - New checklist created via POST api/admin/checklists, sender - checklist creator,\r\n\r\n21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/sharelive/{groupIDs} with specified groups, sender - user who shared the specified checklist,\r\n\r\n21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/usershare with specified users, sender - user who shared the specified checklist,\r\n\r\n21 - Checklist shared via POST api/checklists/{checklistID}/sharelive/{groupIdString} with specified groups, sender - user who shared specified checklist,\r\n\r\n5 - Checklist started with specified groups via POST api/checklists/{checklistID:int}/start/{groupIDs}, sender - user who started checklist,\r\n\r\n5 - Checklist started with users and groups via POST api/checklists/{checklistID:int}/startWithUsersAndGroups, sender - user who started checklist,\r\n\r\n22 - Checklist ended via POST api/checklists/{checklistID}/end, sender - user who ended checklist,\r\n\r\n23 - Ended checklist reactivated via POST api/checklists/{checklistID}/reactivate, sender - user who reactivated the ended checklist,\r\n\r\n32 - User/s created via POST api/admin/Users/Register-users, sender - user who registers new user/s,\r\n\r\n32 - User created via POST api/account/login when user logged in first time, user is initialized, sender - user who makes this api request,\r\n\r\n32 - User is initialized via POST api/account/codelogin (login using referral code), sender - user who makes this api request,\r\n\r\n32 - User is initialized via POST api/account/samlredirect (when user logs in using saml sso), sender - created user via saml sso,\r\n\r\n32 - User is registered via POST api/admin/users/register, sender - user who makes request to register new user,\r\n\r\n32 - User/s are imported via POST api/admin/users/import-users, sender - user who makes this api request for import,\r\n\r\n26 - Log created for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) POST api/groups/{id}/activateAlarm, sender - user who sends this request,\r\n\r\n26 - Log created for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) POST api/groups/activateAlarms, sender - user who sends this request,\r\n\r\n27 - Log created for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/{id}/deactivateAlarm, sender - user who sends this request,\r\n\r\n27 - Log created for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/deactivateAlarms, sender - user who sends this request,\r\n\r\n18 - Specified group added to the specified message via POST api/messages/{id}/addgroup/{groupId}, sender - user who makes this request,\r\n\r\n5 - New checklist started when sending emergency message via POST api/messages, sender - user who makes this request,\r\n\r\n19 - Specified message deleted, deleted message is of type GroupMessageType.Message(type 0) or any type other than type 9(GroupMessageType.HoldingStatement) and type 10(GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n38 - Specified message deleted, deleted message is of type GroupMessageType.HoldingStatement(type 9), sender - user who makes this request,\r\n\r\n41 - Specified message deleted, deleted message is of type GroupMessageType.LogNote(type 10), sender - user who makes this request,\r\n\r\n10 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n36 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,\r\n\r\n39 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n20 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n37 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,\r\n\r\n40 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request.\r\n",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns emergency report view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyReport/pdf": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to generate and get emergency report",
        "description": "Parameters: \"type\" - possible values: 1, 2. 1 - crisis based (get report for specific emergency by using its Id), 2 - time interval based (get report for all emergencies within specified timeframe). Now only value 2 is used;\r\n\"crisisid\" - ID of emergency to generate report. Only when \"type\" : 1. Now this parameter is ignored;\r\n\"starttime\" - start time when \"type\" : 2;\r\n\"endtime\" - end time when \"type\" : 2;\r\n\"amplitude\" - single possible value: 2 (virus mode).In case specified include all involved users. For example, if user from initial group sends message in other group, all users should be checked further, what they have done, and include also their actions;\r\n\"depth\" - not used anymore;\r\n\"language\" - language used, possible values: \"en\", \"se\", \"pt\";\r\n\"organizationID\" - optional parameter. In case specified user must be able to manage the specified organization. Specified in case user wants to see actions within the specific organization;\r\n\"includeSuborgs\" - used in pair with \"organizationID\" parameter, in case specified return emergency logs from suborganizations also ;\r\n\"groupId\" - optional parameter, in case specified filter emergency logs by group;\r\n\r\nGenerated report field's:\r\n\"id\" - entity id;\r\n\"timestamp\" - time of event;\r\n\"deltatime\" - [timestamp - data.StartTime] difference between start time(for report generation) and time of event;\r\n\"messageType\" - type of message: typical message, or checklist item checking event, etc (definition of types defined below, after this section);\r\n\"msgtext\" - text of message;\r\n\"images\" - links to the images added to message;\r\n\"documents\" - links to the documents attached to message;\r\n\"audioFiles\" - links to the audioFIles attached to message;\r\n\"sender\" - name of user or service that sent message;\r\n\"sendertype\" - possible values 0,1,2. 0 - Normal - Users that are not initiators of crisis message and not crisis team members,\r\n1 - Initiator - Normal users that have initiated any crisis message within period or crisis. Can be that someone else initiates new crisis thread, then also such person should be marked as initiator. Both for one crisis and period. Could be harder if person initiates new different ongoing crisis later in report, if to mark him as initiator also previously in report,\r\n2 - CTM - Crisis team members;\r\n\"in_groups\" - list of groups and their members that received this message;\r\n\"emergency_type\" -  emergency type id of emergency message;\r\n\"emergency_type_name\" - localized names of the emergency type (in case this is emergency message);\r\n\"latitude\" - latitude of the location of message;\r\n\"longitude\" - longitude of the location of message;\r\n\"location_name\" - name of the location of message;\r\n\"location_time\" - message sent time converted to location time zone;\r\n\"initialId\" - messages initial id in the format (CL(checklistId), OCA(onCallAlertId), MUS(musterId), M(messageId));\r\n\"initial_message_type\" - reply's initial message's type;\r\n\"initial_message_type\" - reply's initial message's subtype;\r\n\"message_recipients\" - message recipients;\r\n\"organization\" - messages organization in case this is broaccast message;\r\n\"ended\" - whether the event connected to this message endded (alarm recalled, checklist ended, oncallalert ended, muster(IamOk) ended);\r\n\"isInitial\" - whether the initial format fits M(messageId) for messages, etc;\r\n            \r\n\r\nMessage types:\r\nPossible values currently in use: \r\n34 - New group created via POST apu/admin/groups/register, sender - user who created group via admin panel,\r\n\r\n35 - Group deleted via DELETE api/admin/groups/{id}/delete, sender - user who deleted specified group,\r\n\r\n33 - User deleted via DELETE api/admin/users/{id}/delete(or deleteFully or deleteNotReally), sender - user who deleted the specified user,\r\n\r\n21 - New checklist created via POST api/admin/checklists, sender - checklist creator,\r\n\r\n21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/sharelive/{groupIDs} with specified groups, sender - user who shared the specified checklist,\r\n\r\n21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/usershare with specified users, sender - user who shared the specified checklist,\r\n\r\n21 - Checklist shared via POST api/checklists/{checklistID}/sharelive/{groupIdString} with specified groups, sender - user who shared specified checklist,\r\n\r\n5 - Checklist started with specified groups via POST api/checklists/{checklistID:int}/start/{groupIDs}, sender - user who started checklist,\r\n\r\n5 - Checklist started with users and groups via POST api/checklists/{checklistID:int}/startWithUsersAndGroups, sender - user who started checklist,\r\n\r\n22 - Checklist ended via POST api/checklists/{checklistID}/end, sender - user who ended checklist,\r\n\r\n23 - Ended checklist reactivated via POST api/checklists/{checklistID}/reactivate, sender - user who reactivated the ended checklist,\r\n\r\n32 - User/s created via POST api/admin/Users/Register-users, sender - user who registers new user/s,\r\n\r\n32 - User created via POST api/account/login when user logged in first time, user is initialized, sender - user who makes this api request,\r\n\r\n32 - User is initialized via POST api/account/codelogin (login using referral code), sender - user who makes this api request,\r\n\r\n32 - User is initialized via POST api/account/samlredirect (when user logs in using saml sso), sender - created user via saml sso,\r\n\r\n32 - User is registered via POST api/admin/users/register, sender - user who makes request to register new user,\r\n\r\n32 - User/s are imported via POST api/admin/users/import-users, sender - user who makes this api request for import,\r\n\r\n26 - Log created for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) POST api/groups/{id}/activateAlarm, sender - user who sends this request,\r\n\r\n26 - Log created for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) POST api/groups/activateAlarms, sender - user who sends this request,\r\n\r\n27 - Log created for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/{id}/deactivateAlarm, sender - user who sends this request,\r\n\r\n27 - Log created for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/deactivateAlarms, sender - user who sends this request,\r\n\r\n18 - Specified group added to the specified message via POST api/messages/{id}/addgroup/{groupId}, sender - user who makes this request,\r\n\r\n5 - New checklist started when sending emergency message via POST api/messages, sender - user who makes this request,\r\n\r\n19 - Specified message deleted, deleted message is of type GroupMessageType.Message(type 0) or any type other than type 9(GroupMessageType.HoldingStatement) and type 10(GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n38 - Specified message deleted, deleted message is of type GroupMessageType.HoldingStatement(type 9), sender - user who makes this request,\r\n\r\n41 - Specified message deleted, deleted message is of type GroupMessageType.LogNote(type 10), sender - user who makes this request,\r\n\r\n10 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n36 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,\r\n\r\n39 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n20 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,\r\n\r\n37 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,\r\n\r\n40 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request.\r\n",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyReportBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns emergency report view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyReportConfig": {
      "get": {
        "tags": ["Admin"],
        "summary": "Gets config for emergency tests for user",
        "responses": {
          "200": {
            "description": "Returns emergency report configuration view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportConfigModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportConfigModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportConfigModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportConfigModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyReportConfigModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/MenuItems": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get menu items, user can access menu items enabled in its organization/s",
        "responses": {
          "200": {
            "description": "Returns menu item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/AllMenuItems": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get all menu items. Only SuperAdmin can access.",
        "responses": {
          "200": {
            "description": "Returns menu item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuItemViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyTypes": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create emergency type",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created emergency type's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete specified emergency types",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/EmergencyTypes/{id}": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified emergency type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "emergency type id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EmergencyTypeBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edited emergency type's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EmergencyTypeViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/EmergencyTypes/{id}/LinkToSubOrgGroups": {
      "post": {
        "tags": ["Admin"],
        "summary": "This endpoint used by manager of parent organization or suborganization to link groups of suborganization to EmergencyTypes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "emergency type id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/LinkEmergencyTypeToGroupsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/EmergencyTypes/{id}/AssignToSubOrganizations": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint used to link emergency type from parent organization to suborganizations.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "emergency type id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignEmergencyTypeToSubOrganizationsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/EmergencyTypes/{id}/Delete": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete specified emergency type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "emergency type id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Roles/{id}": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified role. Only SuperAdmin can access this endpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "role id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UserRoleBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edite role's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Documents/List": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get the list of available documents and folders",
        "parameters": [
          {
            "name": "offline",
            "in": "query",
            "description": "in case 'true' return only offline documents and folders",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "if specified, return only documents in the specified folder",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "only user with 'DocumentsAdmin' permission (SuperAdmin role) can use this parameter. In case specified return documents where: user making the request\r\n            is member in the documents (organization OR its parent organization), document belongs to the group of the specified (organization OR its parent organization), document is in the specified folder that belongs to the specified (organization OR its parent organization)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "filter documents and folder by their name in case insensitive manner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "in case specified return only documents that belong to the specified group",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeFolders",
            "in": "query",
            "description": "this parameter used in pair with 'groupId'. By default 'true'. In case true return also documents that belong to the folders of the specified group",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model containing documents and folders info and count",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentAndFoldersViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentAndFoldersViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentAndFoldersViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentAndFoldersViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentAndFoldersViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Documents/Add": {
      "post": {
        "tags": ["Admin"],
        "summary": "Uploading document, include file to request body",
        "parameters": [
          {
            "name": "offline",
            "in": "query",
            "description": "Should document be available offline?",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "ID of the group",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "ID of the Organization (aka Account)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "ID of the folder to put document in",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user to share document with",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model containing ids of posted document/s",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostDocumentsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDocumentsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDocumentsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostDocumentsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PostDocumentsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Documents/{id}/Share": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to share the specified document.",
        "description": "OrganizationIds, UserIds parameter not used in this endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns document view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Documents/{id}/Unshare": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to unshare the specified document from groups and/or folders",
        "description": "GroupIds and FolderIds are used, ignore other parameters here",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns document view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentViewModelBrief"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Documents": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified documents",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDeleteBindingModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Documents/Download": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to download the specified document/s",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns documents as zip file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Folders/Add": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create new folder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns folder view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Folders/AddFolders": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create new folders",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FolderBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns folder view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Folders/{id}/Rename": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to rename specified folder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "folder id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns folder view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FolderViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Folders/{id}/Share": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to share the specified folder with the specified group/s",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "folder id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DocumentShareBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Folders": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified folder/s",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderDeleteBindingModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Documents/setoffline": {
      "post": {
        "tags": ["Admin"],
        "summary": "Allows to change folders and documents Offline status in bulk",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Tutorials/Create": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create new tutorial",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created tutorial's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Tutorials/{id}": {
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified tutorial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tutorial id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get the specified tutorial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tutorial id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns tutorial view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified tutorial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tutorial id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/TutorialBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edited tutorial's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Tutorials/All": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to return all tutorials excluding content",
        "responses": {
          "200": {
            "description": "Returns tutorial view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Tutorials/WebAdmin/{id}/{language}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get the specified web admin tutorial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tutorial id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "language of tutorial content",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns tutorial's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Tutorials/WebAdminTutorials/{language}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get web admin tutorials that have content in the specified language",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns tutorial view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Tutorials/Reorder": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to reorder specified tutorials in bulk",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EditTutorialSortOrderBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Import/Summaries": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get user import summaries",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "optional value: 0 - SSO, 1 - FTP, 3 - API",
            "schema": {
              "$ref": "#/components/schemas/ImportSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns import summary report view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSummaryReportViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSummaryReportViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSummaryReportViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSummaryReportViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSummaryReportViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Contacts": {
      "get": {
        "tags": ["Admin"],
        "summary": "Endpoint to get contacts",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "in case specified, return contacts from users parent organization",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "global",
            "in": "query",
            "description": "in case true, return global contacts not related to specific organization",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeSuborganizations",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns import summary report view model",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to create new contact",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns new contact's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Contacts/{contactId}": {
      "post": {
        "tags": ["Admin"],
        "summary": "Endpoint to edit the specified contact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ContactBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edited contact's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContactViewModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Admin"],
        "summary": "Endpoint to delete the specified contact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Notices": {
      "get": {
        "tags": ["Admin"],
        "summary": "Returns unread Notices for the user.Notices are similar to notifications. They are used in admin panel to inform users about: 1.Release notes: to show whats new in the released version of the application received by all users;\r\n2. When alarm is forced down to suborganization via POST api/admin/EmergencyTypes/{id}/AssignToSubOrganizations Notice is sent to administrators of the suborganization and its parent organization.",
        "parameters": [
          {
            "name": "cleared",
            "in": "query",
            "description": "Pass true to get read notices",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of notices",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "take the specified number of notices",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noticeTypes",
            "in": "query",
            "description": "filter notices by type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NoticeType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns new contact's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoticeViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoticeViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoticeViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoticeViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoticeViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Notices/{noticeId}/Read": {
      "post": {
        "tags": ["Admin"],
        "summary": "Mark specified Notice as read",
        "parameters": [
          {
            "name": "noticeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/Notices/ByType/{noticeType}/ReadAll": {
      "post": {
        "tags": ["Admin"],
        "summary": "Mark all Notices of the specified type as read",
        "parameters": [
          {
            "name": "noticeType",
            "in": "path",
            "description": "Notice type to filter",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NoticeType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/SkolonSchools": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to retrieve Skolon schools using the provided OAuth code.\r\nIt first sets the redirect URL for the Skolon client, using either the provided redirect URL or the default one from the configuration.\r\nThen, it obtains the access token using the provided OAuth code.\r\nIf the access token is invalid, it returns an Unauthorized response with an error message.\r\nOtherwise, it retrieves the list of schools from the Skolon client and returns an Ok response with the schools.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The optional organization ID to return skolon schools that are attached to organization or its suborganizations.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "oAuthCode",
            "in": "query",
            "description": "The OAuth code used to obtain the access token.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The optional redirect URL for the Skolon client.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkolonSchool"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkolonSchool"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkolonSchool"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkolonSchool"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkolonSchool"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Test": {
      "get": {
        "tags": ["Admin"],
        "summary": "Test endpoint to check whether api is responding in backend",
        "responses": {
          "200": {
            "description": "Returns view model which contains current utc time",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              },
              "text/xml": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/Admin/TestError": {
      "get": {
        "tags": ["Admin"],
        "summary": "Test endpoint that returns error",
        "responses": {
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/Admin/TestStatus": {
      "get": {
        "tags": ["Admin"],
        "summary": "Test endpoint  that returns 404 NotFound",
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/statistics": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to retrieve statistics for the admin dashboard.\r\nIt returns the count of active organizations, sub-organizations, users, and inactive users.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatisticsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatisticsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatisticsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatisticsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatisticsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/exceptions": {
      "get": {
        "tags": ["Admin"],
        "summary": "This endpoint is used to retrieve front-end exceptions based on the provided search criteria.\r\nIt allows filtering by date range, search keyword, and limiting the number of results returned.\r\nIf no filter is provided, it returns the most recent exceptions up to the default limit.",
        "description": "The feature has been deleted. The endpoint has been kept for the backward compatibility.\r\n            It does nothing and always returns the empty array in the response.",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Optional. The start date for filtering exceptions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Optional. The end date for filtering exceptions.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Optional. The search keyword to filter exceptions by appName, appOs, appVersion, exceptionType or description.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. The maximum number of exceptions to return (default is 100).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/Checklists": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to create new checklist",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created checklist's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Checklists/{id}/ExportCsv": {
      "get": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to export the specified checklist into csv/excel file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "checklist id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns csv/excel file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Checklists/{id}/ExportExcel": {
      "get": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to export the specified checklist into csv/excel file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "checklist id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns csv/excel file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Checklists/Download": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to export checklists in bulk into one excel file",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/DownloadChkecklistsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns excel file containing checklists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Checklists/Import": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Import checklist/s from excel file. 'userIds' and 'groupIds' optional parameters used to share the imported checklist\r\nwith specified users and groups. User making request needs to have access to those users and groups.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "Optional parameter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/checklists/{checklistID}/items": {
      "get": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to get items of the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns checklist item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/checklists/{checklistID}": {
      "delete": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to delete the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Returns nothing"
          }
        }
      },
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to edit the specified checklist's shares",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistSharesBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/checklists": {
      "delete": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to delete the specified checklists",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": ["AdminChecklists"],
        "summary": "Get checklists for the user in admin panel",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "optional parameter. In case specified user should have access to the specified organizations checklists",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns checklist view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Checklists/{checklistID}/rename": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to rename the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/checklists/{checklistID}/sharelive/{groupIDs}": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to share the specified checklist with the specified group/s",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupIDs",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {}
            },
            "application/json": {
              "schema": {}
            },
            "text/json": {
              "schema": {}
            },
            "application/*+json": {
              "schema": {}
            },
            "application/xml": {
              "schema": {}
            },
            "text/xml": {
              "schema": {}
            },
            "application/*+xml": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/checklists/{checklistID}/usershare": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Share checklist with specified users. User making request must be manager of the checklists organization (checklists organization/s retrieved from its user shares and group shares)",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/checklists/{checklistID}/unshare/{groupIDs}": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to unshare the specified checklist from the specified group/s",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupIDs",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/checklists/{checklistID}/userunshare": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Unshare checklist from the specified users. User making request must be manager of the checklists organization (checklists organization/s retrieved from its user shares and group shares)",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/checklists/{checklistID}/edititems": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to edit the specified checklist's items in bulk",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        },
        "deprecated": true
      }
    },
    "/api/Admin/checklists/{checklistID}/itemsAndName": {
      "post": {
        "tags": ["AdminChecklists"],
        "summary": "Endpoint to modify the specified checklist items and name",
        "parameters": [
          {
            "name": "checklistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ModifyChecklistNameAndItemsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Admin/checklists/{id}": {
      "get": {
        "tags": ["AdminChecklists"],
        "summary": "Get the specified checklist by Id. Exactly the same logic as in GET api/admin/checklists for the single checklist with specified Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "checklist id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns checklist view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Users/Import-users": {
      "post": {
        "tags": ["AdminImportUsers"],
        "summary": "Endpoint to import users",
        "description": "\"userImportOperation\" - (0-create, 1-edit). Import summary generated after import.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBindingModelForImport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns user import result view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserImportResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserImportResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserImportResult"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserImportResult"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserImportResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/check-users-availability-excel": {
      "post": {
        "tags": ["AdminImportUsers"],
        "summary": "Endpoint to check users before import via xlsx file",
        "parameters": [
          {
            "name": "organizationIds",
            "in": "query",
            "description": "Required parameter. It could be the main organization and/or sub-organizations of the same main organization.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groupIds",
            "in": "query",
            "description": "Optional parameter. It could be groups that belong to an organization with IDs from organizationIds.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Required parameter. MS Excel file with users data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing new users, users to edit, users with errors",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/check-users-availability": {
      "post": {
        "tags": ["AdminImportUsers"],
        "summary": "Endpoint to check users before import",
        "requestBody": {
          "description": "info about users to import",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UserImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns view model containing new users, users to edit, users with errors",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserImportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{organizationId}/meetingRooms": {
      "post": {
        "tags": ["AdminMeetingRoom"],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomCreationModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationValidationResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationValidationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationValidationResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationValidationResult"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationValidationResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": ["AdminMeetingRoom"],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomViewModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Admin/Organizations/{organizationId}/meetingRooms/{id}": {
      "put": {
        "tags": ["AdminMeetingRoom"],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MeetingRoomEditionModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorMessageViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["AdminMeetingRoom"],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingRoomViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists": {
      "get": {
        "tags": ["Checklists"],
        "summary": "Endpoint to return checklists",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "search by name of checklist",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of checklists",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "return up to the specified number of checklists",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "possible values: \"name\", \"nameDesc\", \"createdDate\", \"createdDateDesc\", \"startedDate\", \"startedDateDesc\" - sort using the specified parameters in asc and desc order",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "possible values: 0 - active, 1 - templates, 2 - ended, used to filter out by checklist type.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "my",
            "in": "query",
            "description": "If true will return checklists created by user, making request (default - true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "others",
            "in": "query",
            "description": "If true will return checklists created by other users (default - true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "If true will return checklists shared with user making request (default - true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view models of checklists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Checklists"],
        "summary": "Endpoint to create new checklist",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created checklist view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists/Summary": {
      "get": {
        "tags": ["Checklists"],
        "summary": "Return checklists summary, the same logic as in GET api/checklists",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "search by name of checklist",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "possible values: 0 - active, 1 - templates, 2 - ended, used to filter out by checklist type.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "my",
            "in": "query",
            "description": "If true will return checklists created by user, making request (default - true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "others",
            "in": "query",
            "description": "If true will return checklists created by other users (default - true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "If true will return checklists shared with user making request (default - true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns checklist summary view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistSummaryViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistSummaryViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistSummaryViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistSummaryViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistSummaryViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists/{id}": {
      "get": {
        "tags": ["Checklists"],
        "summary": "Returns the specified checklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "checklist id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns checklist summary view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Checklists"],
        "summary": "Endpoint to delete the specified checklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "checklist id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/items": {
      "get": {
        "tags": ["Checklists"],
        "summary": "Returns the items of the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns checklist item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Checklists"],
        "summary": "Create new items in the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostChecklistItemBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns checklist item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/share/{groupID}": {
      "post": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/sharelive/{groupIdString}": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Shares the specified checklist with the specified groups",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupIdString",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "messageId(optional parameter) can be passed using this",
          "content": {
            "application/json-patch+json": {
              "schema": {}
            },
            "application/json": {
              "schema": {}
            },
            "text/json": {
              "schema": {}
            },
            "application/*+json": {
              "schema": {}
            },
            "application/xml": {
              "schema": {}
            },
            "text/xml": {
              "schema": {}
            },
            "application/*+xml": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/unshare/{groupIdString}": {
      "post": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupIdString",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/sharelivewithusers": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Sharing live checklists with users",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "Checklist id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageId",
            "in": "query",
            "description": "Message id (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/unsharewithusers": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Unshares specified checklist with specified users",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistWithUsersBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/sharereadonly": {
      "post": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ShareChecklistReadonlyBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/start/{groupIDs}": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Starts specified checklist with specified groups",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupIDs",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistItemBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns started checklist view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/startWithUsersAndGroups": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Endpoint to start checklist with users and groups. The checklist must be already shared with the specified users or the specified users must be members of the groups that the checklist is already shared with.",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skipMessage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/StartChecklistWithUsersAndGroupsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns started checklist view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/end": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Ends the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/reactivate": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Reactivates the ended checklist. The checklist must be ended within the last 14 days.",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/items/reset": {
      "post": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/items/{itemID}": {
      "get": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Checklists"],
        "summary": "Edits the specified checklist item",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns checklist item view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/edititems": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Edits the specified checklist items in bulk",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EditChecklistItemsBulkBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/items/{itemID}/swap/{otherItemID}": {
      "post": {
        "tags": ["Checklists"],
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "otherItemID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/rename": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Renames the specified checklist",
        "parameters": [
          {
            "name": "checklistID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PostChecklistBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/items/{itemID}/comment": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Adding regular comment to checklist item neither marking it complete nor incomplete",
        "operationId": "PostComment",
        "parameters": [
          {
            "name": "checkListID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CommentBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created comment view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistCommentViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistCommentViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistCommentViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistCommentViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistCommentViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Checklists/{checklistID}/items/{itemID}/check": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Marking checklist item as complete",
        "parameters": [
          {
            "name": "checkListID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/Checklists/{checklistID}/items/{itemID}/uncheck": {
      "post": {
        "tags": ["Checklists"],
        "summary": "Marking checklist item as incomplete",
        "parameters": [
          {
            "name": "checkListID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/versions": {
      "get": {
        "tags": ["ClientVersions"],
        "summary": "Returns version information regarding clients: minimum version, latest version, latest desktop app version",
        "responses": {
          "200": {
            "description": "Returns client version view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientVersionViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientVersionViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientVersionViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ClientVersionViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ClientVersionViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Devices": {
      "post": {
        "tags": ["Devices"],
        "summary": "Create new device",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns new created device's model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          }
        }
      }
    },
    "/api/Devices/{id}": {
      "delete": {
        "tags": ["Devices"],
        "summary": "Delete the specified device. This endpoint does not require authentication.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "device id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns client version view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          }
        }
      }
    },
    "/api/Exceptions": {
      "post": {
        "tags": ["Exceptions"],
        "summary": "This endpoint is used to log front-end exceptions sent from the client-side.\r\nIt receives the front-end exception data and publishes it to a message queue\r\nfor further processing. The message queue is subscribed by a backend service\r\nresponsible for handling front-end exceptions.",
        "description": "The feature has been deleted. The endpoint has been kept for the backward compatibility.\r\n            It does nothing and always returns the 200 OK response.",
        "requestBody": {
          "description": "The data representing the front-end exception.",
          "content": {
            "application/json-patch+json": {
              "schema": {}
            },
            "application/json": {
              "schema": {}
            },
            "text/json": {
              "schema": {}
            },
            "application/*+json": {
              "schema": {}
            },
            "application/xml": {
              "schema": {}
            },
            "text/xml": {
              "schema": {}
            },
            "application/*+xml": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/api/ExternalContacts": {
      "get": {
        "tags": ["ExternalContacts"],
        "summary": "Returns external contact lists for users parent organization (such feature exists only for parent organizations)",
        "responses": {
          "200": {
            "description": "Returns contact lists view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListDetailedViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListDetailedViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListDetailedViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListDetailedViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalContactListDetailedViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ExternalContacts/SendMessage": {
      "post": {
        "tags": ["ExternalContacts"],
        "summary": "Sends message to specified contact list/s (one contact list contains many contacts)\r\n<remarks>\"sendMethods\" parameter possible values are: (0-email, 1-sms, 2-voice call)</remarks>",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageToExternalContactListsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/ExternalContacts/GetMessages": {
      "get": {
        "tags": ["ExternalContacts"],
        "summary": "Returns messages sent for external contact lists in users parent organization",
        "responses": {
          "200": {
            "description": "Returns message view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageToExternalContactListViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageToExternalContactListViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageToExternalContactListViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageToExternalContactListViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageToExternalContactListViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ExternalContacts/Message/{messageId}": {
      "get": {
        "tags": ["ExternalContacts"],
        "summary": "Returns the specified message",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns message view models",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToExternalContactListWithRecipientsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToExternalContactListWithRecipientsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToExternalContactListWithRecipientsViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToExternalContactListWithRecipientsViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageToExternalContactListWithRecipientsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/ExternalContacts/ConfirmMessageDelivery/{token}": {
      "post": {
        "tags": ["ExternalContacts"],
        "summary": "Endpoint to confirm that message was received using token. This endpoint does not require authorization.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/ExternalContacts/CalculateSmsLength": {
      "get": {
        "tags": ["ExternalContacts"],
        "summary": "Endpoint to calculate sms message length",
        "responses": {
          "200": {
            "description": "Returns text and token length"
          }
        }
      }
    },
    "/api/ExternalContacts/GetTextTemplates": {
      "get": {
        "tags": ["ExternalContacts"],
        "summary": "Returns text templates used to send messages to external contacts. Those templates belong to parent organization of user",
        "responses": {
          "200": {
            "description": "Returns text templates view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextTemplateForExternalContactsViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get groups for user",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "take the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "used in pair with \"longitude\" to filter out groups by location",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "used in pair with \"latitude\" to filter out groups by location",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "menuitem",
            "in": "query",
            "description": "sort groups by organizations menuitem.In case \"menuitem\" = \"documents\" passed: return groups from users managed organizations also, exclude groups of type 3 and 4.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minGroupMembersCount",
            "in": "query",
            "description": "filter out groups without minimal number of members",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "member",
            "in": "query",
            "description": "filter out groups which user is or not a member",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns groups view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupViewModelExtended"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupViewModelExtended"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupViewModelExtended"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupViewModelExtended"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupViewModelExtended"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/{id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Returns the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns group view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/GroupViewModelExtended"
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/{id}/members": {
      "get": {
        "tags": ["Groups"],
        "summary": "Returns members of the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "take the specified number of elements",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns group members view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMemberViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/{id}/locations": {
      "get": {
        "tags": ["Groups"],
        "summary": "Returns locations of the specified group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns locations view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/{id}/activateAlarm": {
      "post": {
        "tags": ["Groups"],
        "summary": "Endpoint to create log for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Groups/{id}/deactivateAlarm": {
      "post": {
        "tags": ["Groups"],
        "summary": "Endpoint to create log for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Groups/activateAlarms": {
      "post": {
        "tags": ["Groups"],
        "summary": "Endpoint to create log for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it)",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Groups/deactivateAlarms": {
      "post": {
        "tags": ["Groups"],
        "summary": "Endpoint to create log for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it)",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/GroupAlarmBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Import/Skolon": {
      "post": {
        "tags": ["Import"],
        "summary": "Endpoint for Skolon import",
        "parameters": [
          {
            "name": "useVersionTagApproach",
            "in": "query",
            "description": "The 'no-Skolon' property.\r\nIf set to false or null, trigger old approach where the import load of all users from Skolon.\r\nIf set to true, trigger the import that is based on the versionTag approach.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/SkolonUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns just message that import started"
          }
        }
      }
    },
    "/api/Import/Organizations": {
      "post": {
        "tags": ["Import"],
        "summary": "Process organizations for import",
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Locations": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get locations",
        "responses": {
          "200": {
            "description": "Returns location view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Locations"],
        "summary": "Create new location",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              }
            }
          },
          "201": {
            "description": "Returns new location view model"
          }
        }
      }
    },
    "/api/Locations/{id}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Returns the specified location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "location id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns location view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LocationViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/MailDashboard/Organization/{id}/Provider": {
      "post": {
        "tags": ["MailDashboard"],
        "summary": "Edit organizations email provider. Only parent organizations can have email provider setting. This endpoint accessible only for organization managers and users with SuperAdmin role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "email provider data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationEmailProviderBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/MailDashboard/DailySummary": {
      "get": {
        "tags": ["MailDashboard"],
        "summary": "Gets the logs of sent/unsent (delivered/failed) emails for the specified organization between the specified dates. Organization Id parameter is mandatory for all except SuperAdmins.\r\nThis endpoint accessible only for organization managers and users with SuperAdmin role.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "organization id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "start date of email sent date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date of email sent date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns email daily summary view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailDailySummaryViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailDailySummaryViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailDailySummaryViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailDailySummaryViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailDailySummaryViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/MailDashboard/ProviderSummary": {
      "get": {
        "tags": ["MailDashboard"],
        "summary": "Gets the email logs for the specified provider and organization between the specified dates. Organization Id is mandatory for all users except SuperAdmins.\r\nThis endpoint accessible only for organization managers and users with SuperAdmin role.",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "email provider",
            "schema": {
              "$ref": "#/components/schemas/EmailProvider"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "organization id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "start date of email sent date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date of email sent date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns email provider summary view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailProviderSummaryViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailProviderSummaryViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailProviderSummaryViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailProviderSummaryViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailProviderSummaryViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/MailDashboard/Log": {
      "get": {
        "tags": ["MailDashboard"],
        "summary": "This endpoint used to get email logs with different filtering options. Filtering options: email provider, organization id (mandatory for all users except SuperAdmin), start/end date for email sent date\r\nThis endpoint accessible only for organization managers and users with SuperAdmin role.",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "email provider",
            "schema": {
              "$ref": "#/components/schemas/EmailProvider"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "organization id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "start date of email sent date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end date of email sent date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "filter out email logs by subject or recipients email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sent",
            "in": "query",
            "description": "in case 'true' return logs of delivered email, 'false' - failed emails, 'null' - both. Default value 'null' returns all email logs",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns email log view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailLogViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailLogViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailLogViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailLogViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailLogViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Image": {
      "put": {
        "tags": ["Media"],
        "summary": "Endpoint to upload image file/s",
        "parameters": [
          {
            "name": "tutorial",
            "in": "query",
            "description": "is image tutorial image or not (tutorial images are not resized)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns uploaded image view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Image/Cropped": {
      "put": {
        "tags": ["Media"],
        "summary": "Endpoint to upload cropped image file/s",
        "parameters": [
          {
            "name": "tutorial",
            "in": "query",
            "description": "is image tutorial image or not (tutorial images are not resized)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns uploaded image view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Document": {
      "put": {
        "tags": ["Media"],
        "summary": "Endpoint to upload document file/s",
        "responses": {
          "200": {
            "description": "Returns uploaded document view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutDocumentViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutDocumentViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutDocumentViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutDocumentViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutDocumentViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/GroupDocument": {
      "get": {
        "tags": ["Media"],
        "summary": "Endpoint to list documents",
        "responses": {
          "200": {
            "description": "Returns document view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModelBrief"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModelBrief"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModelBrief"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModelBrief"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModelBrief"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/document/{documentId}/favorite": {
      "post": {
        "tags": ["Media"],
        "summary": "Returns the specified the document",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified file"
          }
        }
      }
    },
    "/api/Media/document/{documentId}/unfavorite": {
      "post": {
        "tags": ["Media"],
        "summary": "Adding document to favorite",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Media/GroupDocument/{documentId}": {
      "get": {
        "tags": ["Media"],
        "summary": "Returns the specified the document",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/GroupDocument/AddDocument/{groupId}": {
      "post": {
        "tags": ["Media"],
        "summary": "Uploading document, include file to request body",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offline",
            "in": "query",
            "description": "Should document be available offline?",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Id of the new document"
          }
        }
      }
    },
    "/api/Media/GroupDocument/AddDocumentToGroups/{groupIds}": {
      "post": {
        "tags": ["Media"],
        "summary": "Uploads document/s to the specified group/s",
        "parameters": [
          {
            "name": "groupIds",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offline",
            "in": "query",
            "description": "should document be accessible offline",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns id of the new document"
          }
        }
      }
    },
    "/api/Media/GroupDocument/DeleteDocument/{documentIdList}": {
      "post": {
        "tags": ["Media"],
        "summary": "Deletes the specified document/s",
        "parameters": [
          {
            "name": "documentIdList",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns ids of deleted documents"
          }
        }
      }
    },
    "/api/Media/GroupDocument/DeleteDocument/{documentId}/FromGroup/{groupId}": {
      "post": {
        "tags": ["Media"],
        "summary": "Removes specified document from specified group",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Media/GroupDocument/setoffline": {
      "post": {
        "tags": ["Media"],
        "summary": "Allows to change folders and documents Offline status in bulk",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetDocumentOfflineBindingModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns message \"Offline statuses updated\""
          }
        }
      }
    },
    "/api/Media/AmazonFile/{fileName}": {
      "get": {
        "tags": ["Media"],
        "summary": "Gets file by fileName. This endpoint does not require authentication.",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns file with specified name",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/File/{fileName}": {
      "get": {
        "tags": ["Media"],
        "summary": "Gets file by fileName. This endpoint does not require authentication.",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns file with specified name",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Folders": {
      "post": {
        "tags": ["Media"],
        "summary": "Endpoint to post new folder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      },
      "get": {
        "tags": ["Media"],
        "summary": "Endpoint to get list of folders",
        "responses": {
          "200": {
            "description": "Returns file with specified name",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Folders/{id}/delete": {
      "post": {
        "tags": ["Media"],
        "summary": "Endpoint to delete the specified folder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "folder id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Media/Folders/{id}/edit": {
      "post": {
        "tags": ["Media"],
        "summary": "Endpoint to edit the specified folder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "folder id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/FolderBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Media/Folders/{id}/documents": {
      "get": {
        "tags": ["Media"],
        "summary": "This endpoint retrieves documents associated with a specified folder.\r\nIt first checks if the user making the request has the necessary permissions to manage or access the documents.\r\nIf the query succeeds, it returns an Ok response with the list of documents.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the folder for which the documents are to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Groups/{id}/documents": {
      "get": {
        "tags": ["Media"],
        "summary": "This endpoint retrieves documents associated with a specified group.\r\nIt first checks if the user making the request has the necessary permissions to manage or access the documents.\r\nIf the query succeeds, it returns an Ok response with the list of documents.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the group for which the documents are to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Folders/AddDocument/{folderIds}": {
      "post": {
        "tags": ["Media"],
        "summary": "Endpoint to upload a file to the specified folder/s",
        "parameters": [
          {
            "name": "folderIds",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offline",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns uploaded new documents id"
          }
        }
      }
    },
    "/api/Media/GroupDocument/{documentId}/AddToGroup/{groupId}": {
      "post": {
        "tags": ["Media"],
        "summary": "Adding document to the group",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offline",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Media/folders/{id}/favorite": {
      "post": {
        "tags": ["Media"],
        "summary": "This endpoint is used to mark a folder as favorite for the currently authenticated user.\r\nIt retrieves the folder based on the provided ID and user permissions to ensure access.\r\nIf the folder is not found or the user doesn't have permission to access it, a Not Found error is returned.\r\nIf the folder is not already marked as a favorite by the user, a new entry is added to the database's favorites list.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the folder to be marked as a favorite.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Media/folders/{id}/unfavorite": {
      "post": {
        "tags": ["Media"],
        "summary": "This endpoint is used to remove a folder from the user's favorites.\r\nIt first retrieves the folder based on the provided ID and user permissions.\r\nIf the folder is not found or the user has no permission to access it, a Not Found error is returned.\r\nIf the folder is favorited by the user, it is unfavorited by removing the corresponding entry from the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the folder to be unfavorited.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Media/GroupDocument/{documentId}/AddToFolder/{folderId}": {
      "post": {
        "tags": ["Media"],
        "summary": "Adding document to the folder",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offline",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Media/GroupDocument/{documentId}/RemoveFromFolder/{folderId}": {
      "post": {
        "tags": ["Media"],
        "summary": "Endpoint to remove the specified document from the specified folder",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Media/Video": {
      "put": {
        "tags": ["Media"],
        "summary": "Uploads video",
        "parameters": [
          {
            "name": "tutorial",
            "in": "query",
            "description": "is it tutorial?",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns uploaded videos view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/VideoStream/{fileName}": {
      "get": {
        "tags": ["Media"],
        "summary": "Endpoint to get video file by name",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified video file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Audio": {
      "put": {
        "tags": ["Media"],
        "summary": "Endpoint to upload audio file",
        "parameters": [
          {
            "name": "tutorial",
            "in": "query",
            "description": "is it tutorial?",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns uploaded audio files view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PutImageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Tutorials": {
      "get": {
        "tags": ["Media"],
        "summary": "Endpoint to get tutorials excluding its content",
        "responses": {
          "200": {
            "description": "Returns tutorial view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TutorialViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Media/Tutorials/{id}/{language}": {
      "get": {
        "tags": ["Media"],
        "summary": "Endpoint to get the specified tutorial with its content in the specified language",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tutorial id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "used to filter out tutorials content by language",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns tutorial view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TutorialViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/MeetingRooms": {
      "get": {
        "tags": ["MeetingRooms"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomSimpleViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomSimpleViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomSimpleViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomSimpleViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingRoomSimpleViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages": {
      "get": {
        "tags": ["Messages"],
        "summary": "Endpoint to get messages",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "filter out messages by its text or text of any reply using this parameter in case insensitive manner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skips the specfied number of messages",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "returns up to the specified number of messages",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recalled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "threshold",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter out messages by its type, possible values:   Message = 0, Report = 1, Emergency = 2, Broadcast = 3,GroupAdditionNormal = 4,GroupAdditionEmergency = 5, SituationReport = 6, HoldingStatement = 9, LogNote = 10, CrossOrganizationEmergency = 11, Forwarded = 12",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "filter out messages by its group connections",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "excludeTypes",
            "in": "query",
            "description": "exclude messages with specified type/s",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns message view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Messages"],
        "summary": "Sends new message",
        "parameters": [
          {
            "name": "senderId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns created message view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/list": {
      "get": {
        "tags": ["Messages"],
        "summary": "Endpoint to get messages",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "filter out messages by its text or text of any reply using this parameter in case insensitive manner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skips the specfied number of messages",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "returns up to the specified number of messages",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recalled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "threshold",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter out messages by its type, possible values:   Message = 0, Report = 1, Emergency = 2, Broadcast = 3,GroupAdditionNormal = 4,GroupAdditionEmergency = 5, SituationReport = 6, HoldingStatement = 9, LogNote = 10, CrossOrganizationEmergency = 11, Forwarded = 12",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "filter out messages by its group connections",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "excludeTypes",
            "in": "query",
            "description": "exclude messages with specified type/s",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns message view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/Messages": {
      "get": {
        "tags": ["Messages"],
        "summary": "Endpoint to get messages v2",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "filter out messages by its text or text of any reply using this parameter in case insensitive manner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skips the specified number of messages",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "returns up to the specified number of messages",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recalled",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "threshold",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter out messages by its type, possible values:   Message = 0, Report = 1, Emergency = 2, Broadcast = 3,GroupAdditionNormal = 4,GroupAdditionEmergency = 5, SituationReport = 6, HoldingStatement = 9, LogNote = 10, CrossOrganizationEmergency = 11, Forwarded = 12",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "filter out messages by its group connections",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "excludeTypes",
            "in": "query",
            "description": "exclude messages with specified type/s",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns message view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModelV2"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModelV2"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModelV2"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModelV2"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageListViewModelV2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/groups": {
      "get": {
        "tags": ["Messages"],
        "summary": "This endpoint returns groups connected to messages user can read. Those groups should be visible to the user\r\nvia GET api/groups. Returned groups then used to filter messages",
        "responses": {
          "200": {
            "description": "For each group it returns the following fields: ID, Name, ImageFileName"
          }
        }
      }
    },
    "/api/Messages/TotalUnread": {
      "get": {
        "tags": ["Messages"],
        "summary": "Get the the [number of unread messages, number of active emergencies, number of messages with unread replies, number of not ended checklists, number of active blocking alarms] within the last 3 months.",
        "responses": {
          "200": {
            "description": "Returns view model containing number of different unread counts",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TotalUnreadViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalUnreadViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotalUnreadViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TotalUnreadViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TotalUnreadViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/FooterData": {
      "get": {
        "tags": ["Messages"],
        "summary": "This endpoint is used to retrieve footer data for the user.\r\nIt provides information about the user's unread messages and replies and the status of an active emergency, if any.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FooterDataViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FooterDataViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FooterDataViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FooterDataViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FooterDataViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/unread": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns number of unread messages within the last 3 months",
        "responses": {
          "200": {
            "description": "Returns single integer value"
          }
        }
      }
    },
    "/api/Messages/{id}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Get specific message by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noCache",
            "in": "query",
            "description": "in case \"true\" retrieve from db, not cache",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeReplies",
            "in": "query",
            "description": "in case \"true\" retrieve replies",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "replyPurpose",
            "in": "query",
            "description": "filter replies by purpose",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReplyPurpose"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns message view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/Messages/{id}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Get specific message by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noCache",
            "in": "query",
            "description": "in case \"true\" retrieve from db, not cache",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeReplies",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns message view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModelV2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModelV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModelV2"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModelV2"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModelV2"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/{id}/addgroup/{groupId}": {
      "post": {
        "tags": ["Messages"],
        "summary": "Add specified group to the specified message",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/{id}/addRecipients": {
      "post": {
        "tags": ["Messages"],
        "summary": "Add recipients to the message. User making request must be sender of the message.\r\nMessage must be send to no groups or only normal groups. User making request must\r\nsee all recipients via GET api/users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "message Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageRecipientsBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns number of recipients added to the message"
          }
        }
      }
    },
    "/api/Messages/{id}/forward": {
      "post": {
        "tags": ["Messages"],
        "summary": "Forwards the specified alarm message to the specified groups and users",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMessageBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns message view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/{messageID}/read": {
      "post": {
        "tags": ["Messages"],
        "summary": "Sets the specified message and its specified replies as read/unread",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageReadBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated last read date"
          }
        }
      }
    },
    "/api/Messages/{messageID}": {
      "post": {
        "tags": ["Messages"],
        "summary": "Edits the specified message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edited message view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Messages"],
        "summary": "Deletes the specified message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/{messageID}/recall": {
      "post": {
        "tags": ["Messages"],
        "summary": "End a crisis",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/{messageID}/reply": {
      "post": {
        "tags": ["Messages"],
        "summary": "Reply to the specified message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "senderId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns reply view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/replies/{replyId}/edit": {
      "post": {
        "tags": ["Messages"],
        "summary": "Edits the specified reply",
        "parameters": [
          {
            "name": "replyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ReplyBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/{messageID}/replies": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns replies of the specified message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skips the specified number of replies, default = 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "returns the specified number of replies, default = null, takes all replies",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "sorting order for replies, possible values: 0,1. 0-asc, 1-desc. Reply sent time used for sorting.",
            "schema": {
              "$ref": "#/components/schemas/SortEnum"
            }
          },
          {
            "name": "threshold",
            "in": "query",
            "description": "this parameter used to filter replies by last edit time and used in pair with \"direction\" parameter. In case direction is 0-asc, then return replies which edited(lastEdited property of reply) after the specified time,\r\n            if 1-desc which edited before the specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hasAttachments",
            "in": "query",
            "description": "filters out replies based on types of attachments they have. Default value - null, no filter. Possible values: 0 - Document, 1 - Photo, 2 - Audio",
            "schema": {
              "$ref": "#/components/schemas/AttachmentType"
            }
          },
          {
            "name": "maxReplyId",
            "in": "query",
            "description": "return replies with ID less than or equal to the specified ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minReplyId",
            "in": "query",
            "description": "return replies with ID greater than or equal to the specified ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noCache",
            "in": "query",
            "description": "return message from database instead of cache",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "replyPurpose",
            "in": "query",
            "description": "filter replies by purpose",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReplyPurpose"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list containing reply view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplyViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplyViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplyViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplyViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplyViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/{messageID}/replies/{replyID}": {
      "delete": {
        "tags": ["Messages"],
        "summary": "Deletes the specified reply of the specified message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "replyID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/{id}/reply/{replyId}/setRead": {
      "post": {
        "tags": ["Messages"],
        "summary": "Endpoint to mark reply to the message as read, user must be recipient of the message and be able to see the specified reply",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "replyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/{id}/reply/{replyId}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Endpoint to get the user reads info for the specified reply (like when each user read this reply)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "replyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns view model containing reply reads info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyDataViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyDataViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyDataViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyDataViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyDataViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/{messageID}/recipients": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns recipients of the specified message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list containing message recipient view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageRecipientViewModelFull"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageRecipientViewModelFull"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageRecipientViewModelFull"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageRecipientViewModelFull"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageRecipientViewModelFull"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/{messageId}/ChangeType": {
      "post": {
        "tags": ["Messages"],
        "summary": "Changes type and reply type of the specified message",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMessageTypeBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/broadcast/organization": {
      "post": {
        "tags": ["Messages"],
        "summary": "Send broadcast message (message type = 3) to organizations. Organizations where user can send the message\r\ncan be retrieved from GET api/messages/broadcast/organizations. Only organization/suborganization members\r\nadded as recipients of the message, nested organization members are excluded. Organization/Suborganization\r\nids should be passed using \"organizationIds\" field. \"organizationId\" and \"subOrganizationId\" fields left\r\nfor backwards compatability.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBroadcastBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns new message view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/broadcast/organizations": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns the organizations where user can send broadcast message (message type=3). Organizations and suborganizations\r\nwhere user is member and their nested organizations",
        "responses": {
          "200": {
            "description": "Returns list containing organization view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/broadcast/suborganization": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns the suborganizations where user can send broadcast message (message type=3). Organizations and suborganizations\r\nwhere user is member and their nested organizations",
        "responses": {
          "200": {
            "description": "Returns list containing organization view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationViewModelShortest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/{id}/attachment/{fileName}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns message attachment with specified name",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "attachment file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns file"
          }
        }
      }
    },
    "/api/Messages/{id}/Archive": {
      "post": {
        "tags": ["Messages"],
        "summary": "Archives the specified message",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Messages/GetBlockingAlarmUsers": {
      "post": {
        "tags": ["Messages"],
        "summary": "Returns users with active(not recalled yet) blocking alarm among the specified users",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/UsersWithBlockingAlarmBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns list containing user view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Messages/ActiveAlarms": {
      "get": {
        "tags": ["Messages"],
        "summary": "Endpoint to get the list of active alarms",
        "parameters": [
          {
            "name": "groupIds",
            "in": "query",
            "description": "Required parameter. Used to filter out active alarms by its group connections",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "minSentDate",
            "in": "query",
            "description": "Not required parameter. Used to exclude active alarms with sent date equal or after the specified date. Default - null",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Not required parameter. Used to skip the specified number of alarms. Default - 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Not required parameter. Used to take the specified number of alarms. Default - 2",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns active alarms view models",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveMessageAlarmListViewModelPaginatedList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveMessageAlarmListViewModelPaginatedList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveMessageAlarmListViewModelPaginatedList"
                }
              }
            }
          }
        }
      }
    },
    "/api/Muster": {
      "get": {
        "tags": ["Muster"],
        "summary": "Get the list of musters",
        "responses": {
          "200": {
            "description": "Returns muster view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MusterViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MusterViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MusterViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MusterViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MusterViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Muster"],
        "summary": "Create new muster",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns muster view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Muster/{id}": {
      "get": {
        "tags": ["Muster"],
        "summary": "Returns the specified muster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "muster id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns muster view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModelFull"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModelFull"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModelFull"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModelFull"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModelFull"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Muster"],
        "summary": "Allows to delete existing muster (I'm OK)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Muster Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Muster/{id}/SetStatus": {
      "post": {
        "tags": ["Muster"],
        "summary": "Set status for the specified muster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "muster id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterStatusBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns muster status view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Muster/{id}/GetStatus": {
      "get": {
        "tags": ["Muster"],
        "summary": "Get the status for the specified muster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "muster id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns muster status view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterUserStatusViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Muster/{id}/end": {
      "post": {
        "tags": ["Muster"],
        "summary": "End the specified muster",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "muster id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Muster/{id}/edit": {
      "post": {
        "tags": ["Muster"],
        "summary": "Allows to edit existing muster (I'm OK)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Muster Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New data model, \"name\" and \"subject\" properties does matter",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MusterBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns edited muster view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MusterViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/News": {
      "get": {
        "tags": ["News"],
        "summary": "Returns news",
        "parameters": [
          {
            "name": "currentRegion",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns news view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NewsViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NewsViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NewsViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NewsViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NewsViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/OnCallAlerts/sent": {
      "get": {
        "tags": ["OnCallAlerts"],
        "summary": "Returns on call alerts sent by the user making this request",
        "responses": {
          "200": {
            "description": "Returns on call alert view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/OnCallAlerts/received": {
      "get": {
        "tags": ["OnCallAlerts"],
        "summary": "Returns on call alerts received by the user making this request",
        "responses": {
          "200": {
            "description": "Returns on call alert view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertReceivedViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertReceivedViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertReceivedViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertReceivedViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertReceivedViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/OnCallAlerts": {
      "post": {
        "tags": ["OnCallAlerts"],
        "summary": "Create new on call alert",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns on call alert view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/OnCallAlerts/{id}/setstatus": {
      "post": {
        "tags": ["OnCallAlerts"],
        "summary": "Set status for the specified on call alert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "on call alert id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertStatusBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/OnCallAlerts/{id}/statuses": {
      "get": {
        "tags": ["OnCallAlerts"],
        "summary": "Get statuses of the specified on call alert id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "on call alert id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns on call alert recipient view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertRecipientViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertRecipientViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertRecipientViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertRecipientViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnCallAlertRecipientViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/OnCallAlerts/{id}/end": {
      "post": {
        "tags": ["OnCallAlerts"],
        "summary": "Ends the specified on call alert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "on call alert id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/OnCallAlerts/{id}/edit": {
      "post": {
        "tags": ["OnCallAlerts"],
        "summary": "Allows to edit existing On call alert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "On call alert id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New data model, \"text\" and \"subject\" properties does matter",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/OnCallAlertBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns on call alert view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OnCallAlertViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/OnCallAlerts/{id}": {
      "delete": {
        "tags": ["OnCallAlerts"],
        "summary": "Allows to delete existing On call alert",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "On call alert id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/PersonalAlarm": {
      "get": {
        "tags": ["PersonalAlarm"],
        "summary": "Returns active personal alarm of the user making this request",
        "responses": {
          "200": {
            "description": "Returns personal alarm view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["PersonalAlarm"],
        "summary": "Create new personal alarm",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns created personal alarm's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/PersonalAlarm/{id}": {
      "get": {
        "tags": ["PersonalAlarm"],
        "summary": "Returns the specified personal alarm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "personal alarm id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns personal alarm view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/PersonalAlarm/update": {
      "post": {
        "tags": ["PersonalAlarm"],
        "summary": "Update existing active personal alarm of the user making this request",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAlarmBindingModels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated personal alarm's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/PersonalAlarm/Cancel": {
      "post": {
        "tags": ["PersonalAlarm"],
        "summary": "Cancels active personal alarm of the user making this request",
        "responses": {
          "200": {
            "description": "Returns cancelled personal alarm's view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/PersonalAlarm/SetOff": {
      "post": {
        "tags": ["PersonalAlarm"],
        "summary": "This endpoint is used to set off a personal alarm for the current user.\r\nIt first retrieves the personal alarm associated with the current user.\r\nIf no personal alarm is found, it returns a Not Found error.\r\nOtherwise, it publishes a message to activate the personal alarm, notifying relevant recipients.\r\nFinally, it returns an Ok response with the activated personal alarm model.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAlarmViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/Rss": {
      "get": {
        "tags": ["Rss"],
        "summary": "Returns RSS feeds for the user making this request",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns RSS feed view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rss"],
        "summary": "Create new RSS feed",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Rss/{id}": {
      "get": {
        "tags": ["Rss"],
        "summary": "Returns the specified RSS feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "feedId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns RSS feed view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RssFeedViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RssFeedViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RssFeedViewModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RssFeedViewModel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RssFeedViewModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rss"],
        "summary": "Store new RSS feed in the specified organization specified feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "feed id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/RssFeedBindingModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Rss/organization/{id}": {
      "get": {
        "tags": ["Rss"],
        "summary": "Returns RSS feeds for the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns RSS feed view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RssFeedViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Rss/{id}/organization/{orgId}": {
      "delete": {
        "tags": ["Rss"],
        "summary": "Deletes the specified RSS feed in the specified organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "feed id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns nothing"
          }
        }
      }
    },
    "/api/Twilio/voice": {
      "get": {
        "tags": ["Twilio"],
        "summary": "Returns voice from the specified text",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns encoded voice content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/Twilio/voice.xml": {
      "get": {
        "tags": ["Twilio"],
        "summary": "Returns encoded voice xml file from the specified text",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns encoded voice content",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/Twilio/reminder.xml": {
      "get": {
        "tags": ["Twilio"],
        "summary": "Returns on call alert's encoded voice content",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns encoded voice content",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Twilio"],
        "summary": "Returns on call alert's encoded voice content",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns encoded voice content",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Twilio/externalContactVoiceCall.xml": {
      "get": {
        "tags": ["Twilio"],
        "summary": "Returns encoded voice content for playing in a call to external contacts",
        "parameters": [
          {
            "name": "voiceMessageUrl",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns encoded voice content",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Twilio"],
        "summary": "Returns encoded voice content for playing in a call to external contacts",
        "parameters": [
          {
            "name": "voiceMessageUrl",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns encoded voice content",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get users list",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "possible values: \"name\", \"nameDesc\" - sort by name, \"roles\", \"rolesDesc\" - sort by the number of roles the user has, \"email\", \"emailDesc\" - sort alphabetically by their email, \"created\", \"createdDesc\" - sort by created date, \"lastVisit, \"lastVisitDesc\" - sort by last visit date, \"groups\", \"groupsDesc\" - sort by users group memberships count,\r\n            \"messages\", \"messagesDesc\" - order by the number of messages sent by the user, \"registrationEmailNotSent\", \"registrationEmailNotSentDesc\" - sort by User.EmailNotSent property. No default value for this parameter. If not specified sorts users by their ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "return user/s that contain in email or display name the specified search parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "skip the specified number of users",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "return the specified number of users, default value = 100",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "menuitem",
            "in": "query",
            "description": "only 2 possible values: \"checklists\" - returns users that have access to checklists; \"personalAlarm\" - returns users who could be selected as PersonalAlarm recipients",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user view models",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user view model",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelExtended"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountDeleteBindingModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivateGroupBindingModel": {
        "required": ["active"],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ActiveMessageAlarmListViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameWithOrganizationModel"
            },
            "nullable": true
          },
          "senderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "senderPhotoFileName": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "emergencyTypeName": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypeIconFileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActiveMessageAlarmListViewModelPaginatedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveMessageAlarmListViewModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AdminStatisticsViewModel": {
        "type": "object",
        "properties": {
          "organizationsCount": {
            "type": "integer",
            "format": "int32"
          },
          "subOrganizationsCount": {
            "type": "integer",
            "format": "int32"
          },
          "usersCount": {
            "type": "integer",
            "format": "int32"
          },
          "inactiveUsersCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AlarmTestStatusBindingModel": {
        "type": "object",
        "properties": {
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AlarmTestViewModel": {
        "type": "object",
        "properties": {
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "success": {
            "type": "boolean",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AlertRecipientStatus": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "ApplicationValidationResult": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "additionalErrorDetails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AssignEmergencyTypeToSubOrganizationsBindingModel": {
        "required": ["organizationIDs"],
        "type": "object",
        "properties": {
          "organizationIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "AssignMenuItemBindingModel": {
        "required": ["assign", "menuItemID"],
        "type": "object",
        "properties": {
          "menuItemID": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "assign": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AttachmentType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "AuthTokenDisposeRequest": {
        "required": ["token"],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string"
          },
          "sendNotification": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationStatusViewModel": {
        "type": "object",
        "properties": {
          "canConnectToDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BulkSubOrganizationBindingModel": {
        "required": ["names", "organizationID"],
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "format": "string"
          },
          "userLimit": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "ChangeMessageTypeBindingModel": {
        "type": "object",
        "properties": {
          "messageType": {
            "$ref": "#/components/schemas/GroupMessageType"
          },
          "replyType": {
            "$ref": "#/components/schemas/ReplyType"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordBindingModel": {
        "required": ["newPassword", "oldPassword"],
        "type": "object",
        "properties": {
          "oldPassword": {
            "minLength": 1,
            "type": "string",
            "format": "password"
          },
          "newPassword": {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "format": "password"
          }
        },
        "additionalProperties": false
      },
      "ChecklistCommentViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "checklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checklistItemID": {
            "type": "integer",
            "format": "int32"
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "imageFileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistItemBulkBindingModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "sortIndex": {
            "type": "integer",
            "format": "int32"
          },
          "delete": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ChecklistItemViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "checklistID": {
            "type": "integer",
            "format": "int32"
          },
          "sortIndex": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "complete": {
            "type": "boolean"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistCommentViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistSummaryViewModel": {
        "type": "object",
        "properties": {
          "active": {
            "type": "integer",
            "format": "int32"
          },
          "template": {
            "type": "integer",
            "format": "int32"
          },
          "ended": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChecklistViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ended": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "totalTasks": {
            "type": "integer",
            "format": "int32"
          },
          "completeTasks": {
            "type": "integer",
            "format": "int32"
          },
          "sharedGroups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserViewModel"
          },
          "lastEditor": {
            "$ref": "#/components/schemas/UserViewModel"
          },
          "lastEdited": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "templateName": {
            "type": "string",
            "nullable": true
          },
          "usersCount": {
            "type": "integer",
            "format": "int32"
          },
          "userNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "directUserShares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSimpleViewModel"
            },
            "nullable": true
          },
          "userSharesViaGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSimpleViewModel"
            },
            "nullable": true
          },
          "organizationsCount": {
            "type": "integer",
            "format": "int32"
          },
          "organizationNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emergencyTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmergencyTypeViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "ClientVersionViewModel": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "string",
            "nullable": true
          },
          "latest": {
            "type": "string",
            "nullable": true
          },
          "latestDesktopApp": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CodeLoginBindingModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommentBindingModel": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "format": "multiline",
            "nullable": true
          },
          "imageFileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactBindingModel": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "global": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactListDetailsViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "numberOfContacts": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfConfirmedContacts": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContactViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CopyGroupsBindingModel": {
        "required": ["groupIds"],
        "type": "object",
        "properties": {
          "groupIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateLocationBindingModel": {
        "required": ["latitude", "longitude"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "userID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          },
          "userAgent": {
            "type": "string",
            "nullable": true
          },
          "appVersion": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeviceType": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
        "type": "integer",
        "format": "int32"
      },
      "DeviceViewModel": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "nullable": true
          },
          "UserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean"
          },
          "Active": {
            "type": "boolean",
            "readOnly": true
          },
          "UserAgent": {
            "type": "string",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisposeAuthTokenForUsersBindingModel": {
        "required": ["userIDs"],
        "type": "object",
        "properties": {
          "userIDs": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "sendNotification": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentAndFoldersViewModel": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentViewModelBrief"
            },
            "nullable": true
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderViewModelExtended"
            },
            "nullable": true
          },
          "documentsCount": {
            "type": "integer",
            "description": "the overall number of documents",
            "format": "int32"
          },
          "documentsSizeDirectlyShared": {
            "type": "integer",
            "description": "the size of documents directly shared with the specified group",
            "format": "int64"
          },
          "documentsSizeSharedViaFolder": {
            "type": "integer",
            "description": "the size of documents shared with the specified group via folder (the documents folder belongs to the specified group)",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "DocumentDeleteBindingModel": {
        "type": "object",
        "properties": {
          "documentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentGroupViewModel": {
        "type": "object",
        "properties": {
          "documentNameInGroup": {
            "type": "string",
            "nullable": true
          },
          "offline": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "GroupID": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType"
          },
          "groupMembersCount": {
            "type": "integer",
            "format": "int32"
          },
          "membersCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DocumentShareBindingModel": {
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "folderIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "offline": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentViewModel": {
        "type": "object",
        "properties": {
          "localName": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "original_filen_name": {
            "type": "string",
            "nullable": true
          },
          "document_url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "group_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentGroupViewModel"
            },
            "nullable": true
          },
          "file_size": {
            "type": "integer",
            "format": "int64"
          },
          "upload_time": {
            "type": "string",
            "format": "date-time"
          },
          "folderids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "offline": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderDocumentViewModel"
            },
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserViewModel"
            },
            "nullable": true
          },
          "default": {
            "type": "boolean"
          },
          "favorite": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentViewModelBrief": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "original_filen_name": {
            "type": "string",
            "nullable": true
          },
          "document_url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "group_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentGroupViewModel"
            },
            "nullable": true
          },
          "file_size": {
            "type": "integer",
            "format": "int64"
          },
          "upload_time": {
            "type": "string",
            "format": "date-time"
          },
          "folderids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "offline": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderDocumentViewModel"
            },
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserViewModel"
            },
            "nullable": true
          },
          "default": {
            "type": "boolean"
          },
          "favorite": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DownloadBindingModel": {
        "type": "object",
        "properties": {
          "documentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "folderIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "singleFile": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DownloadChkecklistsBindingModel": {
        "required": ["checklistIds"],
        "type": "object",
        "properties": {
          "checklistIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "EditChecklistItemBindingModel": {
        "required": ["complete"],
        "type": "object",
        "properties": {
          "complete": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EditChecklistItemsBulkBindingModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistItemBulkBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EditMessageBindingModel": {
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 65536,
            "type": "string",
            "format": "multiline",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "documentFileName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "groupDocumentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EditTutorialContentBindingModel": {
        "required": ["content", "language", "title"],
        "type": "object",
        "properties": {
          "language": {
            "minLength": 1,
            "type": "string"
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "content": {
            "minLength": 1,
            "type": "string",
            "format": "html"
          }
        },
        "additionalProperties": false
      },
      "EditTutorialSortOrderBindingModel": {
        "required": ["sortOrder", "tutorialId"],
        "type": "object",
        "properties": {
          "tutorialId": {
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EditedUserData": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "oldData": {
            "$ref": "#/components/schemas/UserImportData"
          },
          "newData": {
            "$ref": "#/components/schemas/UserImportData"
          },
          "isImportedWithImportAccounts": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmailDailySummaryViewModel": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "successful": {
            "type": "integer",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EmailLogViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "emailProvider": {
            "$ref": "#/components/schemas/EmailProvider"
          },
          "organizationId": {
            "type": "integer",
            "format": "int32"
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailRecipientRecordViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailProvider": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "EmailProviderSummaryViewModel": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "emailProvider": {
            "$ref": "#/components/schemas/EmailProvider"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "successful": {
            "type": "integer",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EmailRecipientRecordViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmailSendMethod": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "EmergencyReportAmplitude": {
        "enum": [1, 2, 3, 4, 5],
        "type": "integer",
        "format": "int32"
      },
      "EmergencyReportBindingModel": {
        "required": ["endTime", "startTime", "type"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EmergencyReportType"
          },
          "crisisID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "amplitude": {
            "$ref": "#/components/schemas/EmergencyReportAmplitude"
          },
          "depth": {
            "$ref": "#/components/schemas/EmergencyReportDepth"
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "includeSuborgs": {
            "type": "boolean"
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyReportConfigModel": {
        "type": "object",
        "properties": {
          "startDaysLimit": {
            "type": "integer",
            "format": "int32"
          },
          "endDaysLimit": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EmergencyReportDepth": {
        "enum": [1, 2],
        "type": "integer",
        "format": "int32"
      },
      "EmergencyReportGroupViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hidden": {
            "type": "boolean"
          },
          "receivers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmergencyReportReceiverViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyReportItemViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "deltaTime": {
            "type": "string",
            "format": "date-span"
          },
          "msgtype": {
            "type": "integer",
            "format": "int32"
          },
          "actionType": {
            "type": "string",
            "nullable": true
          },
          "actionName": {
            "type": "string",
            "nullable": true
          },
          "msgtext": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFiles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sender": {
            "type": "string",
            "nullable": true
          },
          "sendertype": {
            "$ref": "#/components/schemas/SenderType"
          },
          "in_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmergencyReportGroupViewModel"
            },
            "nullable": true
          },
          "emergency_type": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emergency_type_name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedNameViewModel"
            },
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "location_name": {
            "type": "string",
            "nullable": true
          },
          "location_time": {
            "type": "string",
            "nullable": true
          },
          "initialId": {
            "type": "string",
            "nullable": true
          },
          "initial_message_type": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "initial_message_subtype": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message_recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientViewModel"
            },
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationViewModelShortest"
          },
          "ended": {
            "type": "boolean",
            "nullable": true
          },
          "isInitial": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmergencyReportReceiverViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyReportStatsViewModel": {
        "type": "object",
        "properties": {
          "totalUsers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "activeUsers": {
            "type": "integer",
            "format": "int32"
          },
          "groupsTotal": {
            "type": "integer",
            "format": "int32"
          },
          "messagesTotal": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EmergencyReportType": {
        "enum": [1, 2],
        "type": "integer",
        "format": "int32"
      },
      "EmergencyReportViewModel": {
        "type": "object",
        "properties": {
          "emergency": {
            "$ref": "#/components/schemas/EmergencyViewModel"
          },
          "stats": {
            "$ref": "#/components/schemas/EmergencyReportStatsViewModel"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmergencyReportItemViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyTypeBindingModel": {
        "required": ["order"],
        "type": "object",
        "properties": {
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "includeCrisisTeam": {
            "type": "boolean"
          },
          "noGroup": {
            "type": "boolean"
          },
          "skipMap": {
            "type": "boolean"
          },
          "names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedNameBindingModel"
            },
            "nullable": true
          },
          "texts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedTextBindingModel"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "order": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "eventCodeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hideFromMainAccountUsers": {
            "type": "boolean"
          },
          "blocking": {
            "type": "boolean"
          },
          "warningStep": {
            "type": "boolean",
            "nullable": true
          },
          "allowCustomizedText": {
            "type": "boolean",
            "nullable": true
          },
          "checkListTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "soundConfigurationId": {
            "type": "integer",
            "description": "Possible values: null, 1 (null: use old siren sound, 1: use alternative sound)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyTypeIconViewModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyTypeViewModel": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "OrganizationName": {
            "type": "string",
            "nullable": true
          },
          "OrganizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SuborganizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SuborganizationName": {
            "type": "string",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "nullable": true
          },
          "Icon": {
            "type": "string",
            "nullable": true
          },
          "IncludeCrisisTeam": {
            "type": "boolean"
          },
          "Deleted": {
            "type": "boolean"
          },
          "NoGroup": {
            "type": "boolean"
          },
          "Names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedNameViewModel"
            },
            "nullable": true
          },
          "Texts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedTextViewModel"
            },
            "nullable": true
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "SkipMap": {
            "type": "boolean"
          },
          "eventCodeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hideFromMainAccountUsers": {
            "type": "boolean"
          },
          "checkListTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "allowCustomizedText": {
            "type": "boolean"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModelSimple"
            },
            "nullable": true
          },
          "isMandatory": {
            "type": "boolean"
          },
          "linkedSubOrganizationsWithGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubOrganizationSimpleViewModel"
            },
            "nullable": true
          },
          "configuredForSosAlarm": {
            "type": "boolean"
          },
          "warningStep": {
            "type": "boolean"
          },
          "blocking": {
            "type": "boolean"
          },
          "soundConfigurationId": {
            "type": "integer",
            "description": "Possible values: null, 1 (null: use old siren sound, 1: use alternative sound)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "emergency_type": {
            "type": "integer",
            "format": "int32"
          },
          "emergency_type_name": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedNameViewModel"
            },
            "nullable": true
          },
          "group_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "boolean"
          },
          "informed_people": {
            "type": "integer",
            "format": "int32"
          },
          "active_people": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "integer",
            "format": "int32"
          },
          "location_name": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "server_time": {
            "type": "string",
            "format": "date-time"
          },
          "utc_time": {
            "type": "string",
            "format": "date-time"
          },
          "emergency_type_icon_file_name": {
            "type": "string",
            "nullable": true
          },
          "emergency_type_color": {
            "type": "string",
            "nullable": true
          },
          "location_time": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModelSimple"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnableCustomMenuBindingModel": {
        "required": ["enable"],
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EnableMenuItemBindingModel": {
        "required": ["enable", "menuItemID"],
        "type": "object",
        "properties": {
          "menuItemID": {
            "type": "integer",
            "format": "int32"
          },
          "enable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EntityChangeLogViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "userID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          },
          "route": {
            "type": "string",
            "nullable": true
          },
          "requestBody": {
            "nullable": true
          },
          "entityName": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "integer",
            "format": "int32"
          },
          "changedUserEmail": {
            "type": "string",
            "nullable": true
          },
          "oldValue": {
            "nullable": true
          },
          "newValue": {
            "nullable": true
          },
          "ip": {
            "type": "string",
            "nullable": true
          },
          "userAgent": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorMessageViewModel": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventCodeViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "phoneNumber1": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "phoneNumber2": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "contactListIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalContactListBindingModel": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "parentOrganizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactListDetailedViewModel": {
        "type": "object",
        "properties": {
          "numberOfContactsWithEmail": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfContactsWithPhoneNumber": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "numberOfContacts": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactListEditBindingModel": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactListViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "numberOfContacts": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactSMSCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "nullable": true
          },
          "contactLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalContactViewModelPaginatedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalContactViewModel"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExternalContactsDeleteBindingModel": {
        "required": ["contactIds"],
        "type": "object",
        "properties": {
          "contactIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "ExternalContactsImportCsvResultViewModel": {
        "type": "object",
        "properties": {
          "importedCount": {
            "type": "integer",
            "format": "int32"
          },
          "updatedCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FirebaseReport": {
        "type": "object",
        "properties": {
          "multicast_id": {
            "type": "integer",
            "format": "int64"
          },
          "success": {
            "type": "integer",
            "format": "int32"
          },
          "failure": {
            "type": "integer",
            "format": "int32"
          },
          "canonical_ids": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderBindingModel": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "format": "string"
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "offline": {
            "type": "boolean"
          },
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderDeleteBindingModel": {
        "type": "object",
        "properties": {
          "folderIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderDocumentViewModel": {
        "type": "object",
        "properties": {
          "documentNameInFolder": {
            "type": "string",
            "nullable": true
          },
          "ID": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "GroupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "Offline": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "favorited": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderViewModel": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "GroupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "Offline": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "favorited": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderViewModelExtended": {
        "type": "object",
        "properties": {
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserViewModel"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModelSimple"
            },
            "nullable": true
          },
          "numberOfDocuments": {
            "type": "integer",
            "format": "int32"
          },
          "groupsCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ID": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "GroupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "Offline": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "favorited": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FooterDataViewModel": {
        "type": "object",
        "properties": {
          "activeEmergency": {
            "type": "boolean"
          },
          "unreadMessagesAndRepliesCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ForwardMessageBindingModel": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAdminUsersAccountBindingModel": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "string",
            "nullable": true
          },
          "search": {
            "type": "string",
            "nullable": true
          },
          "skip": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organization": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "unsentOnly": {
            "type": "boolean"
          },
          "neverLoggedIn": {
            "type": "boolean"
          },
          "showDeleted": {
            "type": "boolean"
          },
          "inviteStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInviteStatus"
            },
            "nullable": true
          },
          "includeSuborgs": {
            "type": "boolean"
          },
          "menuItem": {
            "type": "string",
            "nullable": true
          },
          "isOrgManager": {
            "type": "boolean",
            "nullable": true
          },
          "creationMethod": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserCreationMethod"
            },
            "nullable": true
          },
          "lastActive": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLastActiveStatus"
            },
            "nullable": true
          },
          "alarmTest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAlarmTestStatus"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupAddMemberModel": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "admin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GroupAlarmBindingModel": {
        "required": ["text"],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupBindingChangeNameModel": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "GroupBindingModel": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "format": "string"
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "memberEmergency": {
            "type": "boolean"
          },
          "openCalendarWriteAccess": {
            "type": "boolean"
          },
          "searchable": {
            "type": "boolean"
          },
          "adminSetsInfo": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "groupType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "userResolve": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResolveBindingModel"
            },
            "nullable": true
          },
          "usableForSuborganizationEmergencyTypes": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageFileName": {
            "type": "string",
            "nullable": true
          },
          "contactPersonName": {
            "type": "string",
            "nullable": true
          },
          "contactPersonEmailAddress": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "contactPersonPhoneNumber": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "codesQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reusableCode": {
            "type": "boolean",
            "nullable": true
          },
          "importId": {
            "type": "string",
            "nullable": true
          },
          "contactPersonTitle": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupCopyViewModel": {
        "type": "object",
        "properties": {
          "Copied": {
            "type": "integer",
            "format": "int32"
          },
          "NodFound": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GroupMemberViewModel": {
        "type": "object",
        "properties": {
          "groupID": {
            "type": "integer",
            "format": "int32"
          },
          "userID": {
            "type": "integer",
            "format": "int32"
          },
          "info": {
            "type": "string",
            "nullable": true
          },
          "admin": {
            "type": "boolean"
          },
          "showPhone": {
            "type": "boolean"
          },
          "lastAccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "joined": {
            "type": "string",
            "format": "date-time"
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupMemberViewModelFull": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "registrationEmailNotSent": {
            "type": "boolean"
          },
          "registrationEmailSent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "registrationTokenExpired": {
            "type": "boolean",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32"
          },
          "userID": {
            "type": "integer",
            "format": "int32"
          },
          "info": {
            "type": "string",
            "nullable": true
          },
          "admin": {
            "type": "boolean"
          },
          "showPhone": {
            "type": "boolean"
          },
          "lastAccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "joined": {
            "type": "string",
            "format": "date-time"
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupMessageType": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
        "type": "integer",
        "format": "int32"
      },
      "GroupStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "boolean"
          },
          "addToGroupOrganization": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupType": {
        "enum": [0, 1, 2, 3, 4],
        "type": "integer",
        "format": "int32"
      },
      "GroupViewModel": {
        "type": "object",
        "properties": {
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "memberEmergency": {
            "type": "boolean"
          },
          "openCalendarWriteAccess": {
            "type": "boolean"
          },
          "searchable": {
            "type": "boolean"
          },
          "adminSetsInfo": {
            "type": "boolean"
          },
          "member": {
            "type": "boolean",
            "nullable": true
          },
          "admin": {
            "type": "boolean",
            "nullable": true
          },
          "hidden": {
            "type": "boolean"
          },
          "menuItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "subOrganizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subOrganizationname": {
            "type": "string",
            "nullable": true
          },
          "groupMembersCount": {
            "type": "integer",
            "format": "int32"
          },
          "membersCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageFileName": {
            "type": "string",
            "nullable": true
          },
          "contactPersonName": {
            "type": "string",
            "nullable": true
          },
          "contactPersonEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "contactPersonPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "contactPersonTitle": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "GroupID": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType"
          }
        },
        "additionalProperties": false
      },
      "GroupViewModelExtended": {
        "type": "object",
        "properties": {
          "municipality": {
            "type": "string",
            "nullable": true
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "groupType": {
            "type": "integer",
            "format": "int32"
          },
          "totalMessageCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "lastSentMessage": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "groupsInOrganization": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "personsInOrganization": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "admins": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "membersInGroup": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "town": {
            "type": "string",
            "nullable": true
          },
          "subLocality": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emergencyTypesCount": {
            "type": "integer",
            "format": "int32"
          },
          "usableForSuborganizationEmergencyTypes": {
            "type": "boolean"
          },
          "memberIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "locationname": {
            "type": "string",
            "nullable": true
          },
          "containsUsersFromOtherOrganizations": {
            "type": "boolean",
            "readOnly": true
          },
          "totalReferralCodesUses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "remainingReferralCodesUses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "referralCode": {
            "type": "string",
            "nullable": true
          },
          "importId": {
            "type": "string",
            "nullable": true
          },
          "reusableCode": {
            "type": "boolean",
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "memberEmergency": {
            "type": "boolean"
          },
          "openCalendarWriteAccess": {
            "type": "boolean"
          },
          "searchable": {
            "type": "boolean"
          },
          "adminSetsInfo": {
            "type": "boolean"
          },
          "member": {
            "type": "boolean",
            "nullable": true
          },
          "admin": {
            "type": "boolean",
            "nullable": true
          },
          "hidden": {
            "type": "boolean"
          },
          "menuItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "subOrganizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subOrganizationname": {
            "type": "string",
            "nullable": true
          },
          "groupMembersCount": {
            "type": "integer",
            "format": "int32"
          },
          "membersCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageFileName": {
            "type": "string",
            "nullable": true
          },
          "contactPersonName": {
            "type": "string",
            "nullable": true
          },
          "contactPersonEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "contactPersonPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "contactPersonTitle": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "GroupID": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType"
          }
        },
        "additionalProperties": false
      },
      "GroupViewModelSimple": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "GroupID": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupType"
          },
          "groupMembersCount": {
            "type": "integer",
            "format": "int32"
          },
          "membersCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupsViewModel": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModelExtended"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpContent": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HttpMethod": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpRequestMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "versionPolicy": {
            "$ref": "#/components/schemas/HttpVersionPolicy"
          },
          "content": {
            "$ref": "#/components/schemas/HttpContent"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "requestUri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "options": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HttpResponseMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/HttpContent"
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "reasonPhrase": {
            "type": "string",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "trailingHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "requestMessage": {
            "$ref": "#/components/schemas/HttpRequestMessage"
          },
          "isSuccessStatusCode": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HttpStatusCode": {
        "enum": [
          100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 208, 226,
          300, 301, 302, 303, 304, 305, 306, 307, 308, 400, 401, 402, 403, 404,
          405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421,
          422, 423, 424, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505,
          506, 507, 508, 510, 511
        ],
        "type": "integer",
        "format": "int32"
      },
      "HttpVersionPolicy": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "IdNameModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdNameWithOrganizationModel": {
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/IdNameModel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportSource": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "ImportSummaryReportViewModel": {
        "type": "object",
        "properties": {
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportSummaryViewModel"
            },
            "nullable": true,
            "readOnly": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ImportSummaryViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "organizationId": {
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "usersAdded": {
            "type": "integer",
            "format": "int32"
          },
          "usersUpdated": {
            "type": "integer",
            "format": "int32"
          },
          "usersDeleted": {
            "type": "integer",
            "format": "int32"
          },
          "usersInvalidData": {
            "type": "integer",
            "format": "int32"
          },
          "usersErrors": {
            "type": "integer",
            "format": "int32"
          },
          "groupsAdded": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "totalEntries": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ImportType": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "InformUsersBindingModel": {
        "required": ["userIds"],
        "type": "object",
        "properties": {
          "userIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "emailSubject": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InitiateAlarmTestBindingModel": {
        "required": ["deviceType", "token"],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          }
        },
        "additionalProperties": false
      },
      "InitiateAlarmTestViewModel": {
        "type": "object",
        "properties": {
          "testId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "InputData": {
        "type": "object",
        "properties": {
          "importId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "skip": {
            "type": "boolean"
          },
          "secondaryPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntercomClientType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "IntercomTokenViewModel": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationForIntercomViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkEmergencyTypeToGroupsBindingModel": {
        "required": ["groupIDs", "subOrganizationID"],
        "type": "object",
        "properties": {
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "subOrganizationID": {
            "type": "integer",
            "format": "int32"
          },
          "noGroup": {
            "type": "boolean",
            "nullable": true
          },
          "skipMap": {
            "type": "boolean",
            "nullable": true
          },
          "allowCustomizedText": {
            "type": "boolean",
            "nullable": true
          },
          "warningStep": {
            "type": "boolean",
            "nullable": true
          },
          "checklistTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "blocking": {
            "type": "boolean",
            "nullable": true
          },
          "texts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedTextBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizedNameBindingModel": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizedNameViewModel": {
        "type": "object",
        "properties": {
          "Language": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ShortName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizedTextBindingModel": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizedTextViewModel": {
        "type": "object",
        "properties": {
          "Language": {
            "type": "string",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "creatorUserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "hidden": {
            "type": "boolean"
          },
          "geoCountry": {
            "type": "string",
            "nullable": true
          },
          "geoRegion": {
            "type": "string",
            "nullable": true
          },
          "geoTown": {
            "type": "string",
            "nullable": true
          },
          "geoSubLocality": {
            "type": "string",
            "nullable": true
          },
          "geoStreet": {
            "type": "string",
            "nullable": true
          },
          "geoStreetNumber": {
            "type": "string",
            "nullable": true
          },
          "geoPostalCode": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginBindingModel": {
        "type": "object",
        "properties": {
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "IsDesktopApp": {
            "type": "boolean",
            "nullable": true
          },
          "oauth_code": {
            "type": "string",
            "nullable": true
          },
          "redirect_url": {
            "type": "string",
            "nullable": true
          },
          "sso_provider": {
            "$ref": "#/components/schemas/SsoProvider"
          },
          "email_2fa_code": {
            "type": "boolean"
          },
          "clientType": {
            "$ref": "#/components/schemas/ClientType"
          }
        },
        "additionalProperties": false
      },
      "ManageUserGroupsBindingModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "groupStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupStatus"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ManageUserGroupsViewModel": {
        "type": "object",
        "properties": {
          "SuccessAdding": {
            "type": "integer",
            "format": "int32"
          },
          "FailedAdding": {
            "type": "integer",
            "format": "int32"
          },
          "SuccessRemoving": {
            "type": "integer",
            "format": "int32"
          },
          "FailedRemoving": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MeetingRoomCreationModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeetingRoomEditionModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeetingRoomSimpleViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeetingRoomViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MenuItemDisplayNameViewModel": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MenuItemViewModel": {
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "displayNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemDisplayNameViewModel"
            },
            "nullable": true,
            "readOnly": true
          },
          "assigned": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "technicalName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MenuItemViewModelBrief": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "technicalName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageAttachmentBindingModel": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AttachmentType"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageAttachmentViewModel": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AttachmentType"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageListViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupMessageType"
          },
          "subType": {
            "type": "integer",
            "format": "int32"
          },
          "replyType": {
            "$ref": "#/components/schemas/ReplyType"
          },
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "groupName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "groupNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "documentFileName": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentViewModel"
            },
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "lastRead": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "recalled": {
            "type": "boolean"
          },
          "hasBlockingAlarm": {
            "type": "boolean"
          },
          "lastReplyText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "lastReplySent": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "lastReplySender": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "lastReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastReplyLocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastReplyLocationName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recipientCount": {
            "type": "integer",
            "format": "int32"
          },
          "recipientReadCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "messageRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientViewModel"
            },
            "description": "Returned only in case Message.Type == GroupMessageType.Message and message sent without any groups",
            "nullable": true,
            "readOnly": true
          },
          "checklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checklistName": {
            "type": "string",
            "nullable": true
          },
          "lastReplyChecklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastReplyChecklistName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "profilePictureFileName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "searchReplyText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "searchReplyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "searchReplySender": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "searchReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "emergencyTypeName": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "edited": {
            "type": "boolean"
          },
          "repliesCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "unreadRepliesCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "lastReplyPhotoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "lastReplyDocumentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "lastReplyAudioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "musterID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onCallAlertID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isCrisisTeamMember": {
            "type": "boolean"
          },
          "isLastReplyDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "lastReplySentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emergencyTypeIconFileName": {
            "type": "string",
            "nullable": true
          },
          "ended": {
            "type": "string",
            "description": "In messages where I'm OK(muster), on call alerts or checklists are shared, returns time when they are ended\r\nUsed in GET api/messages/list; GET api/messages/{id}",
            "format": "date-time",
            "nullable": true
          },
          "musterDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageListViewModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupMessageType"
          },
          "subType": {
            "type": "integer",
            "format": "int32"
          },
          "replyType": {
            "$ref": "#/components/schemas/ReplyType"
          },
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "groupNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "recalled": {
            "type": "boolean"
          },
          "lastReplyText": {
            "type": "string",
            "nullable": true
          },
          "lastReplySent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReplySender": {
            "type": "string",
            "nullable": true
          },
          "lastReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastReplyLocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastReplyLocationName": {
            "type": "string",
            "nullable": true
          },
          "messageRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientViewModel"
            },
            "nullable": true
          },
          "checklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "searchReplyText": {
            "type": "string",
            "nullable": true
          },
          "searchReplyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "searchReplySender": {
            "type": "string",
            "nullable": true
          },
          "searchReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emergencyTypeName": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unreadRepliesCount": {
            "type": "integer",
            "format": "int32"
          },
          "lastReplyPhotoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lastReplyDocumentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lastReplyAudioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "musterID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onCallAlertID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isLastReplyDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "lastReplySentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ended": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageReadBindingModel": {
        "required": ["read"],
        "type": "object",
        "properties": {
          "read": {
            "type": "boolean"
          },
          "replyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageRecipientViewModel": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MessageRecipientViewModelFull": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "format": "int32"
          },
          "read": {
            "type": "boolean"
          },
          "lastRead": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstRead": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "userID": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MessageRecipientsBindingModel": {
        "required": ["recipientIds"],
        "type": "object",
        "properties": {
          "recipientIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "MessageToExternalContactListViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "contactLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactListDetailsViewModel"
            },
            "nullable": true
          },
          "numberOfReceivers": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfConfirmedReceivers": {
            "type": "integer",
            "format": "int32"
          },
          "sendMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendMethod"
            },
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "senderId": {
            "type": "integer",
            "format": "int32"
          },
          "sendTime": {
            "type": "string",
            "format": "date-time"
          },
          "sentWithConfirmationLink": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MessageToExternalContactListWithRecipientsViewModel": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageToExternalContactRecipientViewModel"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "contactLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactListDetailsViewModel"
            },
            "nullable": true
          },
          "numberOfReceivers": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfConfirmedReceivers": {
            "type": "integer",
            "format": "int32"
          },
          "sendMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendMethod"
            },
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "senderId": {
            "type": "integer",
            "format": "int32"
          },
          "sendTime": {
            "type": "string",
            "format": "date-time"
          },
          "sentWithConfirmationLink": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MessageToExternalContactListsBindingModel": {
        "required": ["contactListIds", "sendMethods", "text"],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string"
          },
          "sendMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendMethod"
            }
          },
          "contactListIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "generateToken": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MessageToExternalContactRecipientViewModel": {
        "type": "object",
        "properties": {
          "readEmail": {
            "type": "boolean",
            "nullable": true
          },
          "readSms": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "nullable": true
          },
          "contactListId": {
            "type": "integer",
            "format": "int32"
          },
          "contactListName": {
            "type": "string",
            "nullable": true
          },
          "emailReadTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "smsReadTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageViewModel": {
        "type": "object",
        "properties": {
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "goodStatus": {
            "type": "boolean",
            "nullable": true
          },
          "situationReportID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "situationReportName": {
            "type": "string",
            "nullable": true
          },
          "totalTaskCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCompletedTasks": {
            "type": "integer",
            "format": "int32"
          },
          "emergencyRecallTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Organization": {
            "$ref": "#/components/schemas/OrganizationViewModelShortest"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyViewModel"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModel"
            },
            "nullable": true,
            "readOnly": true
          },
          "originalMessage": {
            "$ref": "#/components/schemas/OriginalMessageViewModel"
          },
          "emergencyTypePrewrittenText": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypePrewrittenTexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedTextViewModel"
            },
            "nullable": true
          },
          "OnCallAlert": {
            "$ref": "#/components/schemas/OnCallAlertViewModel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupMessageType"
          },
          "subType": {
            "type": "integer",
            "format": "int32"
          },
          "replyType": {
            "$ref": "#/components/schemas/ReplyType"
          },
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "groupName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "groupNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "documentFileName": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentViewModel"
            },
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "lastRead": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "recalled": {
            "type": "boolean"
          },
          "hasBlockingAlarm": {
            "type": "boolean"
          },
          "lastReplyText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "lastReplySent": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "lastReplySender": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "lastReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastReplyLocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastReplyLocationName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recipientCount": {
            "type": "integer",
            "format": "int32"
          },
          "recipientReadCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "messageRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientViewModel"
            },
            "description": "Returned only in case Message.Type == GroupMessageType.Message and message sent without any groups",
            "nullable": true,
            "readOnly": true
          },
          "checklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checklistName": {
            "type": "string",
            "nullable": true
          },
          "lastReplyChecklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "lastReplyChecklistName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "profilePictureFileName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "searchReplyText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "searchReplyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "searchReplySender": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "searchReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "emergencyTypeName": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "edited": {
            "type": "boolean"
          },
          "repliesCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "unreadRepliesCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "lastReplyPhotoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "lastReplyDocumentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "lastReplyAudioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "musterID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onCallAlertID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isCrisisTeamMember": {
            "type": "boolean"
          },
          "isLastReplyDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "lastReplySentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emergencyTypeIconFileName": {
            "type": "string",
            "nullable": true
          },
          "ended": {
            "type": "string",
            "description": "In messages where I'm OK(muster), on call alerts or checklists are shared, returns time when they are ended\r\nUsed in GET api/messages/list; GET api/messages/{id}",
            "format": "date-time",
            "nullable": true
          },
          "musterDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageViewModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/GroupMessageType"
          },
          "subType": {
            "type": "integer",
            "format": "int32"
          },
          "replyType": {
            "$ref": "#/components/schemas/ReplyType"
          },
          "senderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "groupNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentViewModel"
            },
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "lastRead": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "recalled": {
            "type": "boolean"
          },
          "hasBlockingAlarm": {
            "type": "boolean"
          },
          "lastReplyText": {
            "type": "string",
            "nullable": true
          },
          "lastReplySent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReplySenderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recipientCount": {
            "type": "integer",
            "format": "int32"
          },
          "recipientReadCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "messageRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientViewModel"
            },
            "nullable": true
          },
          "checklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checklistName": {
            "type": "string",
            "nullable": true
          },
          "profilePictureFileName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyTypeName": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "edited": {
            "type": "boolean"
          },
          "musterID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onCallAlertID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emergencyTypeIconFileName": {
            "type": "string",
            "nullable": true
          },
          "ended": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "musterDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "goodStatus": {
            "type": "boolean",
            "nullable": true
          },
          "Organization": {
            "$ref": "#/components/schemas/OrganizationViewModelShortest"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyViewModel"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModel"
            },
            "nullable": true
          },
          "originalMessage": {
            "$ref": "#/components/schemas/OriginalMessageViewModel"
          },
          "emergencyTypePrewrittenText": {
            "type": "string",
            "nullable": true
          },
          "emergencyTypePrewrittenTexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedTextViewModel"
            },
            "nullable": true
          },
          "OnCallAlert": {
            "$ref": "#/components/schemas/OnCallAlertViewModel"
          }
        },
        "additionalProperties": false
      },
      "ModifyChecklistNameAndItemsBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistItemBulkBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ModifyChecklistSharesBindingModel": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MusterBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MusterCreateSetting": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "MusterGroupViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MusterStatusBindingModel": {
        "type": "object",
        "properties": {
          "imok": {
            "type": "boolean"
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MusterUserStatusViewModel": {
        "type": "object",
        "properties": {
          "userid": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "lastupdated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "imok": {
            "type": "boolean",
            "nullable": true
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "locationLatitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "locationLongitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MusterViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "creatorid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "creatorname": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "ended": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusterUserStatusViewModel"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusterGroupViewModel"
            },
            "nullable": true
          },
          "recipients": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "recipientsOk": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "recipientsNotOk": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MusterViewModelFull": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "creatorid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "creatorname": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "ended": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusterUserStatusViewModel"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MusterGroupViewModel"
            },
            "nullable": true
          },
          "recipients": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "recipientsOk": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "recipientsNotOk": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NewsViewModel": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "geoRegion": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "externalURL": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "feedID": {
            "type": "integer",
            "format": "int32"
          },
          "feedName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoticeType": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
        "type": "integer",
        "format": "int32"
      },
      "NoticeViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/NoticeType"
          },
          "entityId": {
            "type": "integer",
            "format": "int32"
          },
          "read": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationResult": {
        "type": "object",
        "properties": {
          "message_id": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationsViewModel": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "format": "int32"
          },
          "Broker": {
            "type": "string",
            "nullable": true
          },
          "Payload": {
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string",
            "nullable": true
          },
          "Time": {
            "type": "string",
            "format": "date-time"
          },
          "Device": {
            "$ref": "#/components/schemas/DeviceViewModel"
          }
        },
        "additionalProperties": false
      },
      "OnCallAlertBindingModel": {
        "required": ["groupID"],
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32"
          },
          "recipientIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OnCallAlertReceivedViewModel": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AlertRecipientStatus"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "groupImage": {
            "type": "string",
            "nullable": true
          },
          "senderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "started": {
            "type": "string",
            "format": "date-time"
          },
          "ended": {
            "type": "boolean"
          },
          "totalRecipients": {
            "type": "integer",
            "format": "int32"
          },
          "totalAnswered": {
            "type": "integer",
            "format": "int32"
          },
          "canParticipate": {
            "type": "integer",
            "format": "int32"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OnCallAlertRecipientViewModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AlertRecipientStatus"
          },
          "responseTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "hasPhoneNumber": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OnCallAlertStatusBindingModel": {
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AlertRecipientStatus"
          }
        },
        "additionalProperties": false
      },
      "OnCallAlertViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "nullable": true
          },
          "groupImage": {
            "type": "string",
            "nullable": true
          },
          "senderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "started": {
            "type": "string",
            "format": "date-time"
          },
          "ended": {
            "type": "boolean"
          },
          "totalRecipients": {
            "type": "integer",
            "format": "int32"
          },
          "totalAnswered": {
            "type": "integer",
            "format": "int32"
          },
          "canParticipate": {
            "type": "integer",
            "format": "int32"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrganizationBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "groupName": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subOrganizationsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "usersDeleteMethod": {
            "$ref": "#/components/schemas/UsersDeleteMethod"
          },
          "pushSetting": {
            "$ref": "#/components/schemas/PushSetting"
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "customMainMenuEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "helpText": {
            "type": "string",
            "nullable": true
          },
          "externalLink": {
            "type": "string",
            "nullable": true
          },
          "parentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "useParentEmergencies": {
            "type": "boolean",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "mainContactName": {
            "type": "string",
            "nullable": true
          },
          "mainContactEmail": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "mainContactPhoneNumber": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "invoicePostalAddress": {
            "type": "string",
            "nullable": true
          },
          "invoiceEmail": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "invoiceGlnNumber": {
            "type": "string",
            "nullable": true
          },
          "invoiceElectronicReference": {
            "type": "string",
            "nullable": true
          },
          "supportPersonName": {
            "type": "string",
            "nullable": true
          },
          "supportPhoneNumber": {
            "pattern": "^\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*$",
            "type": "string",
            "nullable": true
          },
          "supportEmail": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "TwoFactorAuthEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "MaxNumberOfUsers": {
            "maximum": 2147483647,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "HasUserLimit": {
            "type": "boolean",
            "nullable": true
          },
          "UserLimit": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DesktopAppEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "EmailSendMethod": {
            "$ref": "#/components/schemas/EmailSendMethod"
          },
          "coForAllUsersLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "musterCreateSetting": {
            "$ref": "#/components/schemas/MusterCreateSetting"
          },
          "sessionLengthDaysMobile": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sessionLengthDaysWeb": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sessionLengthDaysDesktop": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "firstSessionReminderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "secondSessionReminderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "thirdSessionReminderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultLanguage": {
            "type": "string",
            "nullable": true
          },
          "userRegistrationTemplateName": {
            "type": "string",
            "nullable": true
          },
          "SsoProvider": {
            "$ref": "#/components/schemas/SsoProvider"
          },
          "SsoAccessToken": {
            "type": "string",
            "nullable": true
          },
          "SsoRefreshToken": {
            "type": "string",
            "nullable": true
          },
          "SsoExpires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "openIdUrl": {
            "type": "string",
            "nullable": true
          },
          "openIdClientId": {
            "type": "string",
            "nullable": true
          },
          "openIdAudience": {
            "type": "string",
            "nullable": true
          },
          "ssoEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "sftpEnabled": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationBroadcastBindingModel": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subOrganizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "maxLength": 65536,
            "type": "string",
            "format": "multiline",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "documentFileName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "groupDocumentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationEmailProviderBindingModel": {
        "type": "object",
        "properties": {
          "emailProvider": {
            "$ref": "#/components/schemas/EmailProvider"
          }
        },
        "additionalProperties": false
      },
      "OrganizationForIntercomViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationImportSettingsBindingModel": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "notificationEmail": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "sendRegistrationEmail": {
            "type": "boolean"
          },
          "sendImportReport": {
            "type": "boolean"
          },
          "importType": {
            "$ref": "#/components/schemas/ImportType"
          },
          "ftpHost": {
            "type": "string",
            "nullable": true
          },
          "ftpPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ftpUser": {
            "type": "string",
            "nullable": true
          },
          "ftpPassword": {
            "type": "string",
            "nullable": true
          },
          "deleteFileAfterProcessing": {
            "type": "boolean",
            "nullable": true
          },
          "groupSeparator": {
            "type": "string",
            "nullable": true
          },
          "updatePrimaryPhoneNumberOnlyIfPresent": {
            "type": "boolean",
            "nullable": true
          },
          "updateSecondaryPhoneNumberOnlyIfPresent": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationImportSettingsTestViewModel": {
        "type": "object",
        "properties": {
          "inputData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputData"
            },
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationImportSettingsViewModel": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "notificationEmail": {
            "type": "string",
            "nullable": true
          },
          "sendRegistrationEmail": {
            "type": "boolean"
          },
          "sendImportReport": {
            "type": "boolean"
          },
          "importType": {
            "$ref": "#/components/schemas/ImportType"
          },
          "ftpHost": {
            "type": "string",
            "nullable": true
          },
          "ftpPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ftpUser": {
            "type": "string",
            "nullable": true
          },
          "ftpPassword": {
            "type": "string",
            "nullable": true
          },
          "deleteFileAfterProcessing": {
            "type": "boolean"
          },
          "groupSeparator": {
            "type": "string",
            "nullable": true
          },
          "updatePrimaryPhoneNumberOnlyIfPresent": {
            "type": "boolean"
          },
          "updateSecondaryPhoneNumberOnlyIfPresent": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrganizationManagerViewModel": {
        "type": "object",
        "properties": {
          "lastAccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isMain": {
            "type": "boolean"
          },
          "sentMessages": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrganizationSamlSettingsBindingModel": {
        "type": "object",
        "properties": {
          "samlSettingsId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "samlMetadataUrl": {
            "type": "string",
            "nullable": true
          },
          "signingCertificate": {
            "type": "string",
            "nullable": true
          },
          "signingCertificatePassword": {
            "type": "string",
            "nullable": true
          },
          "signatureAlgorithm": {
            "type": "string",
            "nullable": true
          },
          "signatureValidationCertificate": {
            "type": "string",
            "nullable": true
          },
          "issuer": {
            "type": "string",
            "nullable": true
          },
          "certificateValidationMode": {
            "type": "string",
            "nullable": true
          },
          "revocationMode": {
            "type": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationSamlSettingsViewModel": {
        "type": "object",
        "properties": {
          "samlSettingsId": {
            "type": "integer",
            "format": "int32"
          },
          "samlMetadataUrl": {
            "type": "string",
            "nullable": true
          },
          "signingCertificate": {
            "type": "string",
            "nullable": true
          },
          "signingCertificatePassword": {
            "type": "string",
            "nullable": true
          },
          "signatureAlgorithm": {
            "type": "string",
            "nullable": true
          },
          "signatureValidationCertificate": {
            "type": "string",
            "nullable": true
          },
          "issuer": {
            "type": "string",
            "nullable": true
          },
          "certificateValidationMode": {
            "type": "string",
            "nullable": true
          },
          "revocationMode": {
            "type": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationSsoSettingsBindingModel": {
        "type": "object",
        "properties": {
          "ssoProvider": {
            "$ref": "#/components/schemas/SsoProvider"
          },
          "sendSSOSetupEmail": {
            "type": "boolean",
            "nullable": true
          },
          "skolonSchools": {
            "$ref": "#/components/schemas/OrganizationSsoSettingsSkolonSchools"
          },
          "suborganizationSkolonSchools": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OrganizationSsoSettingsSkolonSchools"
            },
            "nullable": true
          },
          "redirectUrl": {
            "type": "string",
            "nullable": true
          },
          "oAuthCode": {
            "type": "string",
            "nullable": true
          },
          "openIdUrl": {
            "type": "string",
            "nullable": true
          },
          "openIdClientId": {
            "type": "string",
            "nullable": true
          },
          "openIdAudience": {
            "type": "string",
            "nullable": true
          },
          "openIdJwkEndpoint": {
            "type": "string",
            "nullable": true
          },
          "ldapUrl": {
            "type": "string",
            "nullable": true
          },
          "ldapPort": {
            "type": "string",
            "nullable": true
          },
          "ldapBaseDn": {
            "type": "string",
            "nullable": true
          },
          "ldapBindDn": {
            "type": "string",
            "nullable": true
          },
          "ldapBindPassword": {
            "type": "string",
            "nullable": true
          },
          "ldapUsersDn": {
            "type": "string",
            "nullable": true
          },
          "ldapGroupsDn": {
            "type": "string",
            "nullable": true
          },
          "ldapCnAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapMemberOfAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapEmailAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapMemberAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapTitleAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapNameAttribute": {
            "type": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "samlSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationSamlSettingsBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationSsoSettingsSkolonSchools": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "skolonSchoolIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationType": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "OrganizationViewModel": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "numberOfGroups": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfUsers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "crisisTeamID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "crisisTeamName": {
            "type": "string",
            "nullable": true
          },
          "subOrganizationsEnabled": {
            "type": "boolean"
          },
          "numberOfSubOrganizations": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "sosAlarmEnabled": {
            "type": "boolean"
          },
          "customMainMenuEnabled": {
            "type": "boolean"
          },
          "helpText": {
            "type": "string",
            "nullable": true
          },
          "externalLink": {
            "type": "string",
            "nullable": true
          },
          "useParentEmergencies": {
            "type": "boolean",
            "nullable": true
          },
          "managers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationManagerViewModel"
            },
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "mainContactName": {
            "type": "string",
            "nullable": true
          },
          "mainContactEmail": {
            "type": "string",
            "nullable": true
          },
          "mainContactPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "invoicePostalAddress": {
            "type": "string",
            "nullable": true
          },
          "invoiceEmail": {
            "type": "string",
            "nullable": true
          },
          "invoiceGlnNumber": {
            "type": "string",
            "nullable": true
          },
          "invoiceElectronicReference": {
            "type": "string",
            "nullable": true
          },
          "supportPersonName": {
            "type": "string",
            "nullable": true
          },
          "supportPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "supportEmail": {
            "type": "string",
            "nullable": true
          },
          "alarmGroupsCount": {
            "type": "integer",
            "format": "int32"
          },
          "TwoFactorAuthEnabled": {
            "type": "boolean"
          },
          "twoFactorType": {
            "$ref": "#/components/schemas/TwoFactorType"
          },
          "DesktopAppEnabled": {
            "type": "boolean"
          },
          "EmailSendMethod": {
            "$ref": "#/components/schemas/EmailSendMethod"
          },
          "coForAllUsersLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "coForAllUsersRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasImportSettings": {
            "type": "boolean",
            "nullable": true
          },
          "musterCreateSetting": {
            "$ref": "#/components/schemas/MusterCreateSetting"
          },
          "emailProvider": {
            "$ref": "#/components/schemas/EmailProvider"
          },
          "sessionLengthDaysMobile": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sessionLengthDaysWeb": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sessionLengthDaysDesktop": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "firstSessionReminderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "secondSessionReminderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "thirdSessionReminderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultLanguage": {
            "type": "string",
            "nullable": true
          },
          "ssoProvider": {
            "$ref": "#/components/schemas/SsoProvider"
          },
          "sendSSOSetupEmail": {
            "type": "boolean"
          },
          "SsoAccessToken": {
            "type": "string",
            "nullable": true
          },
          "SsoRefreshToken": {
            "type": "string",
            "nullable": true
          },
          "SsoExpires": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "openIdUrl": {
            "type": "string",
            "nullable": true
          },
          "openIdClientId": {
            "type": "string",
            "nullable": true
          },
          "openIdAudience": {
            "type": "string",
            "nullable": true
          },
          "openIdJwkEndpoint": {
            "type": "string",
            "nullable": true
          },
          "skolonSchools": {
            "$ref": "#/components/schemas/OrganizationSsoSettingsSkolonSchools"
          },
          "ldapUrl": {
            "type": "string",
            "nullable": true
          },
          "ldapPort": {
            "type": "string",
            "nullable": true
          },
          "ldapBaseDn": {
            "type": "string",
            "nullable": true
          },
          "ldapBindDn": {
            "type": "string",
            "nullable": true
          },
          "ldapBindPassword": {
            "type": "string",
            "nullable": true
          },
          "ldapUsersDn": {
            "type": "string",
            "nullable": true
          },
          "ldapGroupsDn": {
            "type": "string",
            "nullable": true
          },
          "ldapCnAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapMemberOfAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapEmailAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapMemberAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapTitleAttribute": {
            "type": "string",
            "nullable": true
          },
          "ldapNameAttribute": {
            "type": "string",
            "nullable": true
          },
          "samlSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationSamlSettingsViewModel"
            },
            "nullable": true
          },
          "ssoEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "sftpEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "userLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userLimitAllocated": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasUserLimit": {
            "type": "boolean"
          },
          "usersDeleteMethod": {
            "$ref": "#/components/schemas/UsersDeleteMethod"
          },
          "pushSetting": {
            "$ref": "#/components/schemas/PushSetting"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MaxNumberOfUsers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfUsersRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationViewModelShort": {
        "type": "object",
        "properties": {
          "usersDeleteMethod": {
            "$ref": "#/components/schemas/UsersDeleteMethod"
          },
          "pushSetting": {
            "$ref": "#/components/schemas/PushSetting"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MaxNumberOfUsers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfUsersRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationViewModelShortest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "AccountId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "domainNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MaxNumberOfUsers": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberOfUsersRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationViewModelWithSupportContacts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "supportPersonName": {
            "type": "string",
            "nullable": true
          },
          "supportPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "supportEmail": {
            "type": "string",
            "nullable": true
          },
          "supportPersonTitle": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationsUsersStatisticsViewModel": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "toNotIncluded": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OriginalMessageViewModel": {
        "type": "object",
        "properties": {
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emergencyTypeName": {
            "type": "string",
            "nullable": true
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "senderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonalAlarmBindingModels": {
        "type": "object",
        "properties": {
          "dispatchTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "locationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deviceId": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "recipientIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "oneMinuteWarning": {
            "type": "boolean",
            "nullable": true
          },
          "allGroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PersonalAlarmViewModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "DispatchTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "Active": {
            "type": "boolean"
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "LocationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DeviceId": {
            "type": "string",
            "nullable": true
          },
          "GroupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "GroupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "oneMinuteWarning": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostChecklistBindingModel": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostChecklistItemBindingModel"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostChecklistItemBindingModel": {
        "required": ["complete", "name"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "complete": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PostDocumentsViewModel": {
        "type": "object",
        "properties": {
          "documentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostMessageBindingModel": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GroupMessageType"
          },
          "replyType": {
            "$ref": "#/components/schemas/ReplyType"
          },
          "subType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recipientIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "senderLatitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "senderLongitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ChecklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "situationReportID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "musterId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onCallAlertId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ceaseNotification": {
            "type": "boolean"
          },
          "subOrganisationIDForEmergencyMessage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "text": {
            "maxLength": 65536,
            "type": "string",
            "format": "multiline",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "documentFileName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "groupDocumentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PushSetting": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "PutDocumentViewModel": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutImageViewModel": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReminderEmailBindingModel": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReorderEmergencyTypeBindingModel": {
        "required": ["emergencyTypeId", "order"],
        "type": "object",
        "properties": {
          "emergencyTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReplyBindingModel": {
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 65536,
            "type": "string",
            "nullable": true
          },
          "replyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChecklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentBindingModel"
            },
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupDocumentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ceaseNotification": {
            "type": "boolean"
          },
          "replyToInitialMessage": {
            "type": "boolean"
          },
          "replyPurpose": {
            "$ref": "#/components/schemas/ReplyPurpose"
          }
        },
        "additionalProperties": false
      },
      "ReplyDataViewModel": {
        "type": "object",
        "properties": {
          "reads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplyReadViewModel"
            },
            "nullable": true
          },
          "notReads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRecipientViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReplyPurpose": {
        "enum": [0, 1, 2, 3, 4, 5],
        "type": "integer",
        "format": "int32"
      },
      "ReplyReadViewModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "replyId": {
            "type": "integer",
            "format": "int32"
          },
          "readTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReplyType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "ReplyViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "deleted": {
            "type": "boolean"
          },
          "replyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "initialReplyText": {
            "type": "string",
            "nullable": true
          },
          "initialReplySender": {
            "type": "string",
            "nullable": true
          },
          "initialReplyLocation": {
            "type": "string",
            "nullable": true
          },
          "initialReplyAttachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "initialReplyPhotoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "initialReplyAudioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "initialReplyDocumentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isInitialReplyDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "sent": {
            "type": "string",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "senderID": {
            "type": "integer",
            "format": "int32"
          },
          "senderName": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "isCrisisTeamMember": {
            "type": "boolean"
          },
          "checklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checklistName": {
            "type": "string",
            "nullable": true
          },
          "photoFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "documentFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "audioFileNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAttachmentViewModel"
            },
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "edited": {
            "type": "boolean"
          },
          "emergencyRecall": {
            "type": "boolean"
          },
          "replyToInitialMessage": {
            "type": "boolean"
          },
          "purpose": {
            "$ref": "#/components/schemas/ReplyPurpose"
          }
        },
        "additionalProperties": false
      },
      "RequestForOrganizationEmailRecipientsBindingModel": {
        "required": ["organizationIDs"],
        "type": "object",
        "properties": {
          "organizationIDs": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "RequestForUserExportToExcelBindingModel": {
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestVerificationTokenViewModel": {
        "type": "object",
        "properties": {
          "requestVerificationToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordBindingModel": {
        "required": ["password", "token", "userID"],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 1,
            "type": "string",
            "format": "password"
          },
          "userID": {
            "type": "integer",
            "format": "int32"
          },
          "token": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RoleBelonging": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "RoleStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RoleViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "roleExplained": {
            "type": "string",
            "nullable": true
          },
          "publicRole": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RssFeedBindingModel": {
        "required": ["organizationID", "region", "type", "url"],
        "type": "object",
        "properties": {
          "region": {
            "minLength": 1,
            "type": "string",
            "format": "string"
          },
          "comment": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "format": "string"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "organizationID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RssFeedStatus": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "RssFeedViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShort"
            },
            "nullable": true
          },
          "latestEntry": {
            "$ref": "#/components/schemas/NewsViewModel"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewsViewModel"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/RssFeedStatus"
          },
          "lastLoad": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendEmailToOrganizationsBindingModel": {
        "required": ["emailTemplateName", "organizationIDs", "title"],
        "type": "object",
        "properties": {
          "organizationIDs": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "emailTemplateName": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SendEmailsToOrganizationsMembersBindingModel": {
        "required": ["emailTemplateName", "organizationIDs"],
        "type": "object",
        "properties": {
          "organizationIDs": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emailTemplateName": {
            "minLength": 1,
            "type": "string"
          },
          "extraParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendMethod": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "SendPasswordTokenBindingModel": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "SendRegistrationEmailModel": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "resendExpired": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SenderType": {
        "enum": [0, 1, 2],
        "type": "integer",
        "format": "int32"
      },
      "SetDocumentOfflineBindingModel": {
        "type": "object",
        "properties": {
          "folderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "documentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "offline": {
            "type": "boolean"
          },
          "action": {
            "$ref": "#/components/schemas/SetOfflineAction"
          }
        },
        "additionalProperties": false
      },
      "SetGroupAdminBindingModel": {
        "required": ["admin"],
        "type": "object",
        "properties": {
          "admin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SetOfflineAction": {
        "enum": [0, 1, 2, 3],
        "type": "integer",
        "format": "int32"
      },
      "SetPreferredLanguageBindingModel": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShareChecklistReadonlyBindingModel": {
        "required": ["groupIds", "userIds"],
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "ShareChecklistWithUsersBindingModel": {
        "required": ["userIds"],
        "type": "object",
        "properties": {
          "userIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "SkolonSchool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "municipality": {
            "type": "string",
            "nullable": true
          },
          "unitCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnitCode"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SkolonUpdateRequest": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkolonUpdateRequestEntityType"
            },
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SkolonUpdateRequestEntityType": {
        "enum": [0, 1, 2, 3, 4, 5],
        "type": "integer",
        "format": "int32"
      },
      "SortByEnum": {
        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        "type": "integer",
        "format": "int32"
      },
      "SortEnum": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "SsoProvider": {
        "enum": [0, 1, 2, 3],
        "type": "integer",
        "format": "int32"
      },
      "SsoRedirectViewModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StartChecklistItemBindingModel": {
        "type": "object",
        "properties": {
          "newName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StartChecklistWithUsersAndGroupsBindingModel": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "newName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringStringIEnumerableKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubOrganizationBindingModel": {
        "required": ["name", "organizationID"],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "format": "string"
          },
          "organizationID": {
            "type": "integer",
            "format": "string"
          },
          "userLimit": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "useOrganizationEmergencies": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubOrganizationSimpleViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupViewModelSimple"
            },
            "nullable": true
          },
          "noGroup": {
            "type": "boolean",
            "nullable": true
          },
          "skipMap": {
            "type": "boolean",
            "nullable": true
          },
          "allowCustomizedText": {
            "type": "boolean",
            "nullable": true
          },
          "warningStep": {
            "type": "boolean",
            "nullable": true
          },
          "checklistTemplateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "blocking": {
            "type": "boolean",
            "nullable": true
          },
          "Texts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedTextViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestApiViewModel": {
        "type": "object",
        "properties": {
          "DatabaseUp": {
            "type": "boolean"
          },
          "RabbitUp": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TextTemplateForExternalContactsBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TextTemplateForExternalContactsViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TotalUnreadViewModel": {
        "type": "object",
        "properties": {
          "UnreadCount": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveEmergency": {
            "type": "boolean"
          },
          "UnreadMessagesAndRepliesCount": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveChecklists": {
            "type": "integer",
            "format": "int32"
          },
          "blockingAlarm": {
            "type": "boolean"
          },
          "personalAlarmDispatchTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "activeMusterCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TutorialBindingModel": {
        "type": "object",
        "properties": {
          "iconName": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "isOnlyWebAdminAccessible": {
            "type": "boolean"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "menuItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EditTutorialContentBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TutorialContent": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "tutorialID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TutorialViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "menuItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isOnlyWebAdminAccessible": {
            "type": "boolean"
          },
          "iconName": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tutorialContents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TutorialContent"
            },
            "nullable": true
          },
          "roleName": {
            "type": "string",
            "nullable": true
          },
          "menuItemName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TwoFactorType": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "UnitCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserAlarmTestStatus": {
        "enum": [0, 1, 2, 3],
        "type": "integer",
        "format": "int32"
      },
      "UserAndGroupViewModel": {
        "type": "object",
        "properties": {
          "User": {
            "$ref": "#/components/schemas/UserMemberViewModel"
          },
          "Group": {
            "$ref": "#/components/schemas/GroupViewModelExtended"
          }
        },
        "additionalProperties": false
      },
      "UserBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phonenumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "nullable": true
          },
          "secondaryPhoneNumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "organizationIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "twoFactorAuthEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorAuthPhoneNumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "nullable": true
          },
          "sendEmail": {
            "type": "boolean",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserBindingModelForImport": {
        "type": "object",
        "properties": {
          "userImportOperation": {
            "$ref": "#/components/schemas/UserImportOperation"
          },
          "userID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "pattern": "^([\\w\\.\\-\\+]+)@([\\w\\-]+(\\.[\\w\\-]+)*\\.(\\w{2,20}))$",
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phonenumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "nullable": true
          },
          "secondaryPhoneNumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "organizationIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "twoFactorAuthEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorAuthPhoneNumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "nullable": true
          },
          "sendEmail": {
            "type": "boolean",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "groupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserCreationMethod": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "UserImportData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "secondaryPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserImportOperation": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "UserImportRequest": {
        "type": "object",
        "properties": {
          "usersToImport": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserImportData"
            },
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserImportResponse": {
        "type": "object",
        "properties": {
          "newUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserImportData"
            },
            "nullable": true
          },
          "usersToEdit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EditedUserData"
            },
            "nullable": true
          },
          "usersWithErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWithErrorData"
            },
            "nullable": true
          },
          "organizationId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserImportResult": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "userImportOperation": {
            "$ref": "#/components/schemas/UserImportOperation"
          },
          "originalUserData": {
            "$ref": "#/components/schemas/UserBindingModelForImport"
          }
        },
        "additionalProperties": false
      },
      "UserInfoBindingModel": {
        "type": "object",
        "properties": {
          "photoFileName": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "phoneNumber": {
            "pattern": "^(?:<Undefined>|\\+?[\\d\\-\\s()]*,?[\\s]?\\+?[\\d\\-\\s()]*)$",
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "streetAddress": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "format": "string",
            "nullable": true
          },
          "municipality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "notifyWithEmail": {
            "type": "boolean",
            "nullable": true
          },
          "notifyMarketing": {
            "type": "boolean",
            "nullable": true
          },
          "groupID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "notifyChecklists": {
            "type": "boolean",
            "nullable": true
          },
          "notifyDocuments": {
            "type": "boolean",
            "nullable": true
          },
          "readDisclaimer": {
            "type": "boolean",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean",
            "nullable": true
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserInfoViewModel": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "authenticationType": {
            "type": "string",
            "nullable": true
          },
          "sosAlarmEnabledInOrganization": {
            "type": "boolean"
          },
          "crisisTeamID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "groupsInOrganization": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "personsInOrganization": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subOrganizationsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "organizationCustomMainMenuEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "isCrisisTeamMember": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionViewModel"
            },
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "managedOrganizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true
          },
          "organizationSupportPersonName": {
            "type": "string",
            "nullable": true
          },
          "organizationSupportPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "organizationSupportEmail": {
            "type": "string",
            "nullable": true
          },
          "organizationHasImportSettings": {
            "type": "boolean",
            "nullable": true
          },
          "loggedAsAdmin": {
            "type": "boolean"
          },
          "coForAllUsersRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "readDisclaimer": {
            "type": "boolean"
          },
          "menuItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemViewModelBrief"
            },
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "preferredLanguage": {
            "type": "string",
            "nullable": true
          },
          "preferredLanguageAdminPanel": {
            "type": "string",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "organizationLogo": {
            "type": "string",
            "nullable": true
          },
          "organizationWebsite": {
            "type": "string",
            "nullable": true
          },
          "organizationExternalLink": {
            "type": "string",
            "nullable": true
          },
          "personalAlarmId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationMusterCreateSetting": {
            "$ref": "#/components/schemas/MusterCreateSetting"
          },
          "organizationHelpText": {
            "type": "string",
            "nullable": true
          },
          "sso_provider": {
            "$ref": "#/components/schemas/SsoProvider"
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "notifyWithEmail": {
            "type": "boolean"
          },
          "notifyChecklists": {
            "type": "boolean"
          },
          "notifyDocuments": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserInfoViewModelApp": {
        "type": "object",
        "properties": {
          "menuItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemViewModelBrief"
            },
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "preferredLanguage": {
            "type": "string",
            "nullable": true
          },
          "preferredLanguageAdminPanel": {
            "type": "string",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          },
          "organizationLogo": {
            "type": "string",
            "nullable": true
          },
          "organizationWebsite": {
            "type": "string",
            "nullable": true
          },
          "organizationExternalLink": {
            "type": "string",
            "nullable": true
          },
          "personalAlarmId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "organizationMusterCreateSetting": {
            "$ref": "#/components/schemas/MusterCreateSetting"
          },
          "organizationHelpText": {
            "type": "string",
            "nullable": true
          },
          "sso_provider": {
            "$ref": "#/components/schemas/SsoProvider"
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "notifyWithEmail": {
            "type": "boolean"
          },
          "notifyChecklists": {
            "type": "boolean"
          },
          "notifyDocuments": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserInviteStatus": {
        "enum": [0, 1, 2, 3],
        "type": "integer",
        "format": "int32"
      },
      "UserLastActiveStatus": {
        "enum": [0, 1, 2, 3],
        "type": "integer",
        "format": "int32"
      },
      "UserMemberViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastaccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastAccessAgent": {
            "type": "string",
            "nullable": true
          },
          "lastAccessIP": {
            "type": "string",
            "nullable": true
          },
          "groupscount": {
            "type": "integer",
            "format": "int32"
          },
          "messagescount": {
            "type": "integer",
            "format": "int32"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleViewModel"
            },
            "nullable": true
          },
          "rolesIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "creationMethod": {
            "$ref": "#/components/schemas/UserCreationMethod"
          },
          "lastActiveStatus": {
            "$ref": "#/components/schemas/UserLastActiveStatus"
          },
          "organization": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "organizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "organizationCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "subOrganization": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "subOrganizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "subOrganizationCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "mainOrganization": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mainOrganizationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "inviteStatus": {
            "$ref": "#/components/schemas/UserInviteStatus"
          },
          "activeTokens": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "twoFactorAuthEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorAuthPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "multipleOrganisations": {
            "type": "boolean",
            "readOnly": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "readOnly": true
          },
          "lastAlarmTestStatus": {
            "$ref": "#/components/schemas/UserAlarmTestStatus"
          },
          "lastAlarmTestDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "structureManager": {
            "type": "boolean",
            "nullable": true
          },
          "managedOrganizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationViewModelShortest"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserPasswordBindingModel": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResolveBindingModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "resolveType": {
            "$ref": "#/components/schemas/UserResolveType"
          }
        },
        "additionalProperties": false
      },
      "UserResolveType": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "UserRoleBindingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "roleExplained": {
            "type": "string",
            "nullable": true
          },
          "isPublicRole": {
            "type": "boolean"
          },
          "names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedNameBindingModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRoleViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "roleExplained": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "isPublicRole": {
            "type": "boolean"
          },
          "assignedToUser": {
            "type": "boolean",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedNameViewModel"
            },
            "nullable": true
          },
          "belonging": {
            "$ref": "#/components/schemas/RoleBelonging"
          }
        },
        "additionalProperties": false
      },
      "UserRolesStatuses": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "roleStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleStatus"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRolesViewModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSimpleViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserViewModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "lastAccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserViewModelExtended": {
        "type": "object",
        "properties": {
          "isCrisisTeamMember": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "municipality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "municipalityname": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "lastAccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserViewModelFull": {
        "type": "object",
        "properties": {
          "streetAddress": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "notifyWithEmail": {
            "type": "boolean"
          },
          "notifyMarketing": {
            "type": "boolean"
          },
          "acceptedTermsAndConditions": {
            "type": "boolean"
          },
          "onDuty": {
            "type": "boolean",
            "deprecated": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "notifyChecklists": {
            "type": "boolean"
          },
          "notifyDocuments": {
            "type": "boolean"
          },
          "isCrisisTeamMember": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "municipality": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "municipalityname": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "photoFileName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "lastAccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "unavailable": {
            "type": "boolean"
          },
          "unavailableDateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserWithErrorData": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "secondaryPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsersAccountViewModel": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMemberViewModel"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UsersDeleteMethod": {
        "enum": [0, 1],
        "type": "integer",
        "format": "int32"
      },
      "UsersWithBlockingAlarmBindingModel": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
